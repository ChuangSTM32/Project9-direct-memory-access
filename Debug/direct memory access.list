
direct memory access.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005554  08005554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0001555c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000670  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006d4  200006d4  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ab48  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022fa  00000000  00000000  0002ac1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a10  00000000  00000000  0002cf20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000797  00000000  00000000  0002d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002503b  00000000  00000000  0002e0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f5e5  00000000  00000000  00053102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000deaf7  00000000  00000000  000626e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c44  00000000  00000000  001411e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  00143e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004768 	.word	0x08004768

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08004768 	.word	0x08004768

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000592:	463b      	mov	r3, r7
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a0:	4a28      	ldr	r2, [pc, #160]	; (8000644 <MX_ADC1_Init+0xb8>)
 80005a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a4:	4b26      	ldr	r3, [pc, #152]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005aa:	4b25      	ldr	r3, [pc, #148]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b0:	4b23      	ldr	r3, [pc, #140]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005cc:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_ADC1_Init+0xbc>)
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005d8:	2202      	movs	r2, #2
 80005da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ea:	4815      	ldr	r0, [pc, #84]	; (8000640 <MX_ADC1_Init+0xb4>)
 80005ec:	f000 fea0 	bl	8001330 <HAL_ADC_Init>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 fa45 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005fa:	2309      	movs	r3, #9
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0xb4>)
 800060c:	f001 f88c 	bl	8001728 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000616:	f000 fa35 	bl	8000a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800061a:	230c      	movs	r3, #12
 800061c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000622:	463b      	mov	r3, r7
 8000624:	4619      	mov	r1, r3
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_ADC1_Init+0xb4>)
 8000628:	f001 f87e 	bl	8001728 <HAL_ADC_ConfigChannel>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000632:	f000 fa27 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000080 	.word	0x20000080
 8000644:	40012000 	.word	0x40012000
 8000648:	0f000001 	.word	0x0f000001

0800064c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a3b      	ldr	r2, [pc, #236]	; (8000758 <HAL_ADC_MspInit+0x10c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d170      	bne.n	8000750 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
 8000672:	4b3a      	ldr	r3, [pc, #232]	; (800075c <HAL_ADC_MspInit+0x110>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a39      	ldr	r2, [pc, #228]	; (800075c <HAL_ADC_MspInit+0x110>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <HAL_ADC_MspInit+0x110>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	613b      	str	r3, [r7, #16]
 8000688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	4b33      	ldr	r3, [pc, #204]	; (800075c <HAL_ADC_MspInit+0x110>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a32      	ldr	r2, [pc, #200]	; (800075c <HAL_ADC_MspInit+0x110>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b30      	ldr	r3, [pc, #192]	; (800075c <HAL_ADC_MspInit+0x110>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <HAL_ADC_MspInit+0x110>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a2b      	ldr	r2, [pc, #172]	; (800075c <HAL_ADC_MspInit+0x110>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b29      	ldr	r3, [pc, #164]	; (800075c <HAL_ADC_MspInit+0x110>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006c2:	2304      	movs	r3, #4
 80006c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c6:	2303      	movs	r3, #3
 80006c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	4822      	ldr	r0, [pc, #136]	; (8000760 <HAL_ADC_MspInit+0x114>)
 80006d6:	f001 ff59 	bl	800258c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006da:	2302      	movs	r3, #2
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	4619      	mov	r1, r3
 80006ec:	481d      	ldr	r0, [pc, #116]	; (8000764 <HAL_ADC_MspInit+0x118>)
 80006ee:	f001 ff4d 	bl	800258c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 80006f4:	4a1d      	ldr	r2, [pc, #116]	; (800076c <HAL_ADC_MspInit+0x120>)
 80006f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 800070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000710:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000714:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000718:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 800071c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000720:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000736:	f001 fbb9 	bl	8001eac <HAL_DMA_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000740:	f000 f9a0 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <HAL_ADC_MspInit+0x11c>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40012000 	.word	0x40012000
 800075c:	40023800 	.word	0x40023800
 8000760:	40020800 	.word	0x40020800
 8000764:	40020400 	.word	0x40020400
 8000768:	200000c8 	.word	0x200000c8
 800076c:	40026410 	.word	0x40026410

08000770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_DMA_Init+0x3c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0b      	ldr	r2, [pc, #44]	; (80007ac <MX_DMA_Init+0x3c>)
 8000780:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_DMA_Init+0x3c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	2038      	movs	r0, #56	; 0x38
 8000798:	f001 fb51 	bl	8001e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800079c:	2038      	movs	r0, #56	; 0x38
 800079e:	f001 fb6a 	bl	8001e76 <HAL_NVIC_EnableIRQ>

}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a16      	ldr	r2, [pc, #88]	; (8000818 <MX_GPIO_Init+0x68>)
 80007c0:	f043 0304 	orr.w	r3, r3, #4
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_GPIO_Init+0x68>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0304 	and.w	r3, r3, #4
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <MX_GPIO_Init+0x68>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <MX_GPIO_Init+0x68>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <MX_GPIO_Init+0x68>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <MX_GPIO_Init+0x68>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_GPIO_Init+0x68>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

}
 800080a:	bf00      	nop
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C1_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C1_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C1_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C1_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C1_Init+0x74>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_I2C1_Init+0x74>)
 800085a:	f002 f843 	bl	80028e4 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000864:	f000 f90e 	bl	8000a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000868:	2100      	movs	r1, #0
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <MX_I2C1_Init+0x74>)
 800086c:	f002 fe05 	bl	800347a <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000876:	f000 f905 	bl	8000a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	4804      	ldr	r0, [pc, #16]	; (8000890 <MX_I2C1_Init+0x74>)
 800087e:	f002 fe38 	bl	80034f2 <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000888:	f000 f8fc 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000128 	.word	0x20000128
 8000894:	40005400 	.word	0x40005400
 8000898:	00061a80 	.word	0x00061a80

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_I2C_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12c      	bne.n	8000918 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_I2C_MspInit+0x88>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_I2C_MspInit+0x88>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_I2C_MspInit+0x88>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008e0:	2312      	movs	r3, #18
 80008e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ec:	2304      	movs	r3, #4
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4619      	mov	r1, r3
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <HAL_I2C_MspInit+0x8c>)
 80008f8:	f001 fe48 	bl	800258c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	4b08      	ldr	r3, [pc, #32]	; (8000924 <HAL_I2C_MspInit+0x88>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	4a07      	ldr	r2, [pc, #28]	; (8000924 <HAL_I2C_MspInit+0x88>)
 8000906:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800090a:	6413      	str	r3, [r2, #64]	; 0x40
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_I2C_MspInit+0x88>)
 800090e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000918:	bf00      	nop
 800091a:	3728      	adds	r7, #40	; 0x28
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40005400 	.word	0x40005400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	uint32_t AdcBuf[2] = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f000 fc63 	bl	8001204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f841 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f7ff ff35 	bl	80007b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000946:	f7ff ff13 	bl	8000770 <MX_DMA_Init>
  MX_I2C1_Init();
 800094a:	f7ff ff67 	bl	800081c <MX_I2C1_Init>
  MX_ADC1_Init();
 800094e:	f7ff fe1d 	bl	800058c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(20);
 8000952:	2014      	movs	r0, #20
 8000954:	f000 fcc8 	bl	80012e8 <HAL_Delay>
  OLED_Init();
 8000958:	f000 f89a 	bl	8000a90 <OLED_Init>
  OLED_ShowString(0, 0, "AD1: ", &Font_11x18);
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <main+0x88>)
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <main+0x8c>)
 8000960:	2100      	movs	r1, #0
 8000962:	2000      	movs	r0, #0
 8000964:	f000 fa94 	bl	8000e90 <OLED_ShowString>
  OLED_ShowString(0, 25, "AD2: ", &Font_11x18);
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <main+0x88>)
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <main+0x90>)
 800096c:	2119      	movs	r1, #25
 800096e:	2000      	movs	r0, #0
 8000970:	f000 fa8e 	bl	8000e90 <OLED_ShowString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)AdcBuf, 2);
 8000974:	463b      	mov	r3, r7
 8000976:	2202      	movs	r2, #2
 8000978:	4619      	mov	r1, r3
 800097a:	4811      	ldr	r0, [pc, #68]	; (80009c0 <main+0x94>)
 800097c:	f000 fda6 	bl	80014cc <HAL_ADC_Start_DMA>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000980:	f04f 31ff 	mov.w	r1, #4294967295
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <main+0x94>)
 8000986:	f000 fd16 	bl	80013b6 <HAL_ADC_PollForConversion>
	  OLED_ShowNum_Fill_Zero(70, 0, 4, AdcBuf[0], &Font_11x18);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	4a09      	ldr	r2, [pc, #36]	; (80009b4 <main+0x88>)
 800098e:	9200      	str	r2, [sp, #0]
 8000990:	2204      	movs	r2, #4
 8000992:	2100      	movs	r1, #0
 8000994:	2046      	movs	r0, #70	; 0x46
 8000996:	f000 faab 	bl	8000ef0 <OLED_ShowNum_Fill_Zero>
	  OLED_ShowNum_Fill_Zero(70, 25, 4, AdcBuf[1], &Font_11x18);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <main+0x88>)
 800099e:	9200      	str	r2, [sp, #0]
 80009a0:	2204      	movs	r2, #4
 80009a2:	2119      	movs	r1, #25
 80009a4:	2046      	movs	r0, #70	; 0x46
 80009a6:	f000 faa3 	bl	8000ef0 <OLED_ShowNum_Fill_Zero>
	  HAL_Delay(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f000 fc9c 	bl	80012e8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)AdcBuf, 2);
 80009b0:	e7e0      	b.n	8000974 <main+0x48>
 80009b2:	bf00      	nop
 80009b4:	20000000 	.word	0x20000000
 80009b8:	08004780 	.word	0x08004780
 80009bc:	08004788 	.word	0x08004788
 80009c0:	20000080 	.word	0x20000080

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b094      	sub	sp, #80	; 0x50
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0320 	add.w	r3, r7, #32
 80009ce:	2230      	movs	r2, #48	; 0x30
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f003 fa44 	bl	8003e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <SystemClock_Config+0xb8>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	4a22      	ldr	r2, [pc, #136]	; (8000a7c <SystemClock_Config+0xb8>)
 80009f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f6:	6413      	str	r3, [r2, #64]	; 0x40
 80009f8:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <SystemClock_Config+0xb8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	4b1d      	ldr	r3, [pc, #116]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a10:	4a1b      	ldr	r2, [pc, #108]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <SystemClock_Config+0xbc>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0320 	add.w	r3, r7, #32
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fd99 	bl	8003570 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a44:	f000 f81e 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	230f      	movs	r3, #15
 8000a4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fffc 	bl	8003a60 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a6e:	f000 f809 	bl	8000a84 <Error_Handler>
  }
}
 8000a72:	bf00      	nop
 8000a74:	3750      	adds	r7, #80	; 0x50
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40007000 	.word	0x40007000

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <OLED_Init>:
        }
    }
}


uint8_t OLED_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

	/* Init I2C */
	OLED_I2C_Init();
 8000a96:	f000 fa4d 	bl	8000f34 <OLED_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000a9a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2178      	movs	r1, #120	; 0x78
 8000aa2:	485b      	ldr	r0, [pc, #364]	; (8000c10 <OLED_Init+0x180>)
 8000aa4:	f002 f960 	bl	8002d68 <HAL_I2C_IsDeviceReady>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <OLED_Init+0x22>
		/* Return false */
		return 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e0a9      	b.n	8000c06 <OLED_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000ab2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000ab6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ab8:	e002      	b.n	8000ac0 <OLED_Init+0x30>
		p--;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d1f9      	bne.n	8000aba <OLED_Init+0x2a>

	/* Init LCD */
	OLED_WRITECOMMAND(0xAE); //display off
 8000ac6:	22ae      	movs	r2, #174	; 0xae
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2078      	movs	r0, #120	; 0x78
 8000acc:	f000 faae 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2078      	movs	r0, #120	; 0x78
 8000ad6:	f000 faa9 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000ada:	2210      	movs	r2, #16
 8000adc:	2100      	movs	r1, #0
 8000ade:	2078      	movs	r0, #120	; 0x78
 8000ae0:	f000 faa4 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000ae4:	22b0      	movs	r2, #176	; 0xb0
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	2078      	movs	r0, #120	; 0x78
 8000aea:	f000 fa9f 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000aee:	22c8      	movs	r2, #200	; 0xc8
 8000af0:	2100      	movs	r1, #0
 8000af2:	2078      	movs	r0, #120	; 0x78
 8000af4:	f000 fa9a 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //---set low column address
 8000af8:	2200      	movs	r2, #0
 8000afa:	2100      	movs	r1, #0
 8000afc:	2078      	movs	r0, #120	; 0x78
 8000afe:	f000 fa95 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x10); //---set high column address
 8000b02:	2210      	movs	r2, #16
 8000b04:	2100      	movs	r1, #0
 8000b06:	2078      	movs	r0, #120	; 0x78
 8000b08:	f000 fa90 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x40); //--set start line address
 8000b0c:	2240      	movs	r2, #64	; 0x40
 8000b0e:	2100      	movs	r1, #0
 8000b10:	2078      	movs	r0, #120	; 0x78
 8000b12:	f000 fa8b 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x81); //--set contrast control register
 8000b16:	2281      	movs	r2, #129	; 0x81
 8000b18:	2100      	movs	r1, #0
 8000b1a:	2078      	movs	r0, #120	; 0x78
 8000b1c:	f000 fa86 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xFF);
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	2100      	movs	r1, #0
 8000b24:	2078      	movs	r0, #120	; 0x78
 8000b26:	f000 fa81 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000b2a:	22a1      	movs	r2, #161	; 0xa1
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2078      	movs	r0, #120	; 0x78
 8000b30:	f000 fa7c 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA6); //--set normal display
 8000b34:	22a6      	movs	r2, #166	; 0xa6
 8000b36:	2100      	movs	r1, #0
 8000b38:	2078      	movs	r0, #120	; 0x78
 8000b3a:	f000 fa77 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000b3e:	22a8      	movs	r2, #168	; 0xa8
 8000b40:	2100      	movs	r1, #0
 8000b42:	2078      	movs	r0, #120	; 0x78
 8000b44:	f000 fa72 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x3F); //
 8000b48:	223f      	movs	r2, #63	; 0x3f
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2078      	movs	r0, #120	; 0x78
 8000b4e:	f000 fa6d 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000b52:	22a4      	movs	r2, #164	; 0xa4
 8000b54:	2100      	movs	r1, #0
 8000b56:	2078      	movs	r0, #120	; 0x78
 8000b58:	f000 fa68 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD3); //-set display offset
 8000b5c:	22d3      	movs	r2, #211	; 0xd3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2078      	movs	r0, #120	; 0x78
 8000b62:	f000 fa63 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x00); //-not offset
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2078      	movs	r0, #120	; 0x78
 8000b6c:	f000 fa5e 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000b70:	22d5      	movs	r2, #213	; 0xd5
 8000b72:	2100      	movs	r1, #0
 8000b74:	2078      	movs	r0, #120	; 0x78
 8000b76:	f000 fa59 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xF0); //--set divide ratio
 8000b7a:	22f0      	movs	r2, #240	; 0xf0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	2078      	movs	r0, #120	; 0x78
 8000b80:	f000 fa54 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xD9); //--set pre-charge period
 8000b84:	22d9      	movs	r2, #217	; 0xd9
 8000b86:	2100      	movs	r1, #0
 8000b88:	2078      	movs	r0, #120	; 0x78
 8000b8a:	f000 fa4f 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x22); //
 8000b8e:	2222      	movs	r2, #34	; 0x22
 8000b90:	2100      	movs	r1, #0
 8000b92:	2078      	movs	r0, #120	; 0x78
 8000b94:	f000 fa4a 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000b98:	22da      	movs	r2, #218	; 0xda
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2078      	movs	r0, #120	; 0x78
 8000b9e:	f000 fa45 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x12);
 8000ba2:	2212      	movs	r2, #18
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2078      	movs	r0, #120	; 0x78
 8000ba8:	f000 fa40 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xDB); //--set vcomh
 8000bac:	22db      	movs	r2, #219	; 0xdb
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2078      	movs	r0, #120	; 0x78
 8000bb2:	f000 fa3b 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000bb6:	2220      	movs	r2, #32
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2078      	movs	r0, #120	; 0x78
 8000bbc:	f000 fa36 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000bc0:	228d      	movs	r2, #141	; 0x8d
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2078      	movs	r0, #120	; 0x78
 8000bc6:	f000 fa31 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0x14); //
 8000bca:	2214      	movs	r2, #20
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2078      	movs	r0, #120	; 0x78
 8000bd0:	f000 fa2c 	bl	800102c <OLED_I2C_Write>
	OLED_WRITECOMMAND(0xAF); //--turn on OLED panel
 8000bd4:	22af      	movs	r2, #175	; 0xaf
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2078      	movs	r0, #120	; 0x78
 8000bda:	f000 fa27 	bl	800102c <OLED_I2C_Write>


	OLED_WRITECOMMAND(OLED_DEACTIVATE_SCROLL);
 8000bde:	222e      	movs	r2, #46	; 0x2e
 8000be0:	2100      	movs	r1, #0
 8000be2:	2078      	movs	r0, #120	; 0x78
 8000be4:	f000 fa22 	bl	800102c <OLED_I2C_Write>

	/* Clear screen */
	OLED_Fill(OLED_COLOR_BLACK);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f000 f843 	bl	8000c74 <OLED_Fill>

	/* Update screen */
	OLED_UpdateScreen();
 8000bee:	f000 f813 	bl	8000c18 <OLED_UpdateScreen>

	/* Set default values */
	OLED.CurrentX = 0;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <OLED_Init+0x184>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	801a      	strh	r2, [r3, #0]
	OLED.CurrentY = 0;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <OLED_Init+0x184>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	OLED.Initialized = 1;
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <OLED_Init+0x184>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8000c04:	2301      	movs	r3, #1
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000128 	.word	0x20000128
 8000c14:	2000057c 	.word	0x2000057c

08000c18 <OLED_UpdateScreen>:

void OLED_UpdateScreen(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e01d      	b.n	8000c60 <OLED_UpdateScreen+0x48>
		OLED_WRITECOMMAND(0xB0 + m);
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	3b50      	subs	r3, #80	; 0x50
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	2078      	movs	r0, #120	; 0x78
 8000c30:	f000 f9fc 	bl	800102c <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x00);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	2078      	movs	r0, #120	; 0x78
 8000c3a:	f000 f9f7 	bl	800102c <OLED_I2C_Write>
		OLED_WRITECOMMAND(0x10);
 8000c3e:	2210      	movs	r2, #16
 8000c40:	2100      	movs	r1, #0
 8000c42:	2078      	movs	r0, #120	; 0x78
 8000c44:	f000 f9f2 	bl	800102c <OLED_I2C_Write>

		/* Write multi data */
		OLED_I2C_WriteMulti(OLED_I2C_ADDR, 0x40, &OLED_Buffer[OLED_WIDTH * m], OLED_WIDTH);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	01db      	lsls	r3, r3, #7
 8000c4c:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <OLED_UpdateScreen+0x58>)
 8000c4e:	441a      	add	r2, r3
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	2140      	movs	r1, #64	; 0x40
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f000 f983 	bl	8000f60 <OLED_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d9de      	bls.n	8000c24 <OLED_UpdateScreen+0xc>
	}
}
 8000c66:	bf00      	nop
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000017c 	.word	0x2000017c

08000c74 <OLED_Fill>:
	for (i = 0; i < sizeof(OLED_Buffer); i++) {
		OLED_Buffer[i] = ~OLED_Buffer[i];
	}
}

void OLED_Fill(OLED_COLOR_t color) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(OLED_Buffer, (color == OLED_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(OLED_Buffer));
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <OLED_Fill+0x14>
 8000c84:	2300      	movs	r3, #0
 8000c86:	e000      	b.n	8000c8a <OLED_Fill+0x16>
 8000c88:	23ff      	movs	r3, #255	; 0xff
 8000c8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <OLED_Fill+0x2c>)
 8000c92:	f003 f8e5 	bl	8003e60 <memset>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000017c 	.word	0x2000017c

08000ca4 <OLED_DrawPixel>:

void OLED_DrawPixel(uint16_t x, uint16_t y, OLED_COLOR_t color) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	80bb      	strh	r3, [r7, #4]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	70fb      	strb	r3, [r7, #3]
	if (
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cba:	d848      	bhi.n	8000d4e <OLED_DrawPixel+0xaa>
		x >= OLED_WIDTH ||
 8000cbc:	88bb      	ldrh	r3, [r7, #4]
 8000cbe:	2b3f      	cmp	r3, #63	; 0x3f
 8000cc0:	d845      	bhi.n	8000d4e <OLED_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (OLED.Inverted) {
 8000cc2:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <OLED_DrawPixel+0xb8>)
 8000cc4:	791b      	ldrb	r3, [r3, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d006      	beq.n	8000cd8 <OLED_DrawPixel+0x34>
		color = (OLED_COLOR_t)!color;
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == OLED_COLOR_WHITE) {
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d11a      	bne.n	8000d14 <OLED_DrawPixel+0x70>
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] |= 1 << (y % 8);
 8000cde:	88fa      	ldrh	r2, [r7, #6]
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	b298      	uxth	r0, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	01db      	lsls	r3, r3, #7
 8000cea:	4413      	add	r3, r2
 8000cec:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <OLED_DrawPixel+0xbc>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	b25a      	sxtb	r2, r3
 8000cf2:	88bb      	ldrh	r3, [r7, #4]
 8000cf4:	f003 0307 	and.w	r3, r3, #7
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	b25b      	sxtb	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b259      	sxtb	r1, r3
 8000d04:	88fa      	ldrh	r2, [r7, #6]
 8000d06:	4603      	mov	r3, r0
 8000d08:	01db      	lsls	r3, r3, #7
 8000d0a:	4413      	add	r3, r2
 8000d0c:	b2c9      	uxtb	r1, r1
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <OLED_DrawPixel+0xbc>)
 8000d10:	54d1      	strb	r1, [r2, r3]
 8000d12:	e01d      	b.n	8000d50 <OLED_DrawPixel+0xac>
	} else {
		OLED_Buffer[x + (y / 8) * OLED_WIDTH] &= ~(1 << (y % 8));
 8000d14:	88fa      	ldrh	r2, [r7, #6]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	b298      	uxth	r0, r3
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	01db      	lsls	r3, r3, #7
 8000d20:	4413      	add	r3, r2
 8000d22:	4a0f      	ldr	r2, [pc, #60]	; (8000d60 <OLED_DrawPixel+0xbc>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	b25a      	sxtb	r2, r3
 8000d28:	88bb      	ldrh	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	2101      	movs	r1, #1
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b259      	sxtb	r1, r3
 8000d3e:	88fa      	ldrh	r2, [r7, #6]
 8000d40:	4603      	mov	r3, r0
 8000d42:	01db      	lsls	r3, r3, #7
 8000d44:	4413      	add	r3, r2
 8000d46:	b2c9      	uxtb	r1, r1
 8000d48:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <OLED_DrawPixel+0xbc>)
 8000d4a:	54d1      	strb	r1, [r2, r3]
 8000d4c:	e000      	b.n	8000d50 <OLED_DrawPixel+0xac>
		return;
 8000d4e:	bf00      	nop
	}
}
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	2000057c 	.word	0x2000057c
 8000d60:	2000017c 	.word	0x2000017c

08000d64 <OLED_SetCursor>:

void OLED_SetCursor(uint16_t x, uint16_t y) {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	80fb      	strh	r3, [r7, #6]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	OLED.CurrentX = x;
 8000d74:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <OLED_SetCursor+0x28>)
 8000d76:	88fb      	ldrh	r3, [r7, #6]
 8000d78:	8013      	strh	r3, [r2, #0]
	OLED.CurrentY = y;
 8000d7a:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <OLED_SetCursor+0x28>)
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	8053      	strh	r3, [r2, #2]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	2000057c 	.word	0x2000057c

08000d90 <OLED_ShowChar>:

char OLED_ShowChar(char ch, FontDef_t* Font, OLED_COLOR_t color) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
	if (
 8000dac:	2b7f      	cmp	r3, #127	; 0x7f
 8000dae:	dc07      	bgt.n	8000dc0 <OLED_ShowChar+0x30>
			OLED_HEIGHT <= (OLED.CurrentY + Font->FontHeight)
 8000db0:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000db2:	885b      	ldrh	r3, [r3, #2]
 8000db4:	461a      	mov	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	785b      	ldrb	r3, [r3, #1]
 8000dba:	4413      	add	r3, r2
			OLED_WIDTH <= (OLED.CurrentX + Font->FontWidth) ||
 8000dbc:	2b3f      	cmp	r3, #63	; 0x3f
 8000dbe:	dd01      	ble.n	8000dc4 <OLED_ShowChar+0x34>
	) {
		/* Error */
		return 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e05e      	b.n	8000e82 <OLED_ShowChar+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e04b      	b.n	8000e62 <OLED_ShowChar+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	3b20      	subs	r3, #32
 8000dd2:	6839      	ldr	r1, [r7, #0]
 8000dd4:	7849      	ldrb	r1, [r1, #1]
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4619      	mov	r1, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	440b      	add	r3, r1
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e030      	b.n	8000e50 <OLED_ShowChar+0xc0>
			if ((b << j) & 0x8000) {
 8000dee:	68fa      	ldr	r2, [r7, #12]
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d010      	beq.n	8000e20 <OLED_ShowChar+0x90>
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t) color);
 8000dfe:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	4413      	add	r3, r2
 8000e08:	b298      	uxth	r0, r3
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e0c:	885a      	ldrh	r2, [r3, #2]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4413      	add	r3, r2
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	79ba      	ldrb	r2, [r7, #6]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f7ff ff43 	bl	8000ca4 <OLED_DrawPixel>
 8000e1e:	e014      	b.n	8000e4a <OLED_ShowChar+0xba>
			} else {
				OLED_DrawPixel(OLED.CurrentX + j, (OLED.CurrentY + i), (OLED_COLOR_t)!color);
 8000e20:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e22:	881a      	ldrh	r2, [r3, #0]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4413      	add	r3, r2
 8000e2a:	b298      	uxth	r0, r3
 8000e2c:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e2e:	885a      	ldrh	r2, [r3, #2]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	4413      	add	r3, r2
 8000e36:	b299      	uxth	r1, r3
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	f7ff ff2d 	bl	8000ca4 <OLED_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d3c8      	bcc.n	8000dee <OLED_ShowChar+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	461a      	mov	r2, r3
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d3ad      	bcc.n	8000dca <OLED_ShowChar+0x3a>
			}
		}
	}

	/* Increase pointer */
	OLED.CurrentX += Font->FontWidth;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e70:	881a      	ldrh	r2, [r3, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <OLED_ShowChar+0xfc>)
 8000e7e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000057c 	.word	0x2000057c

08000e90 <OLED_ShowString>:

char OLED_ShowString(uint16_t x, uint16_t y, char* str, FontDef_t* Font) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60ba      	str	r2, [r7, #8]
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	81fb      	strh	r3, [r7, #14]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	81bb      	strh	r3, [r7, #12]
	OLED_SetCursor(x, y);
 8000ea2:	89ba      	ldrh	r2, [r7, #12]
 8000ea4:	89fb      	ldrh	r3, [r7, #14]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5b 	bl	8000d64 <OLED_SetCursor>

	/* Write characters */
	while (*str) {
 8000eae:	e012      	b.n	8000ed6 <OLED_ShowString+0x46>
		/* Write character by character */
		if (OLED_ShowChar(*str, Font, OLED_COLOR_WHITE) != *str) {
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff69 	bl	8000d90 <OLED_ShowChar>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d002      	beq.n	8000ed0 <OLED_ShowString+0x40>
			/* Return error */
			return *str;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	e00a      	b.n	8000ee6 <OLED_ShowString+0x56>
		}

		/* Increase string pointer */
		str++;
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
	while (*str) {
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1e8      	bne.n	8000eb0 <OLED_ShowString+0x20>
	}

	OLED_UpdateScreen();
 8000ede:	f7ff fe9b 	bl	8000c18 <OLED_UpdateScreen>

	/* Everything OK, zero should be returned */
	return *str;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	781b      	ldrb	r3, [r3, #0]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <OLED_ShowNum_Fill_Zero>:
	snprintf(str, sizeof(str), "%lu", Number);
	OLED_ShowString(x, y, str, Font);
}

void OLED_ShowNum_Fill_Zero(uint16_t x, uint16_t y, uint16_t len, uint32_t Number, FontDef_t* Font)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	4603      	mov	r3, r0
 8000efa:	81fb      	strh	r3, [r7, #14]
 8000efc:	460b      	mov	r3, r1
 8000efe:	81bb      	strh	r3, [r7, #12]
 8000f00:	4613      	mov	r3, r2
 8000f02:	817b      	strh	r3, [r7, #10]
	char str[20];
	snprintf(str, sizeof(str), "%0*lu", len, Number);
 8000f04:	897a      	ldrh	r2, [r7, #10]
 8000f06:	f107 0014 	add.w	r0, r7, #20
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <OLED_ShowNum_Fill_Zero+0x40>)
 8000f12:	2114      	movs	r1, #20
 8000f14:	f002 ff70 	bl	8003df8 <sniprintf>
	OLED_ShowString(x, y, str, Font);
 8000f18:	f107 0214 	add.w	r2, r7, #20
 8000f1c:	89b9      	ldrh	r1, [r7, #12]
 8000f1e:	89f8      	ldrh	r0, [r7, #14]
 8000f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f22:	f7ff ffb5 	bl	8000e90 <OLED_ShowString>
}
 8000f26:	bf00      	nop
 8000f28:	3728      	adds	r7, #40	; 0x28
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	08004794 	.word	0x08004794

08000f34 <OLED_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void OLED_I2C_Init() {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <OLED_I2C_Init+0x28>)
 8000f3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f3e:	e002      	b.n	8000f46 <OLED_I2C_Init+0x12>
		p--;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1f9      	bne.n	8000f40 <OLED_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	0003d090 	.word	0x0003d090

08000f60 <OLED_I2C_WriteMulti>:

void OLED_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b0c7      	sub	sp, #284	; 0x11c
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	4604      	mov	r4, r0
 8000f68:	4608      	mov	r0, r1
 8000f6a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000f6e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000f72:	600a      	str	r2, [r1, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f7a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000f7e:	4622      	mov	r2, r4
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f86:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f92:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000f96:	460a      	mov	r2, r1
 8000f98:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000f9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fa2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fa6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fb4:	e015      	b.n	8000fe2 <OLED_I2C_WriteMulti+0x82>
		dt[i+1] = data[i];
 8000fb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fbe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	441a      	add	r2, r3
 8000fc6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fca:	3301      	adds	r3, #1
 8000fcc:	7811      	ldrb	r1, [r2, #0]
 8000fce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fd2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000fd6:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000fd8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fdc:	3301      	adds	r3, #1
 8000fde:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000fe2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000fec:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000ff0:	8812      	ldrh	r2, [r2, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8df      	bhi.n	8000fb6 <OLED_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000ff6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ffa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	b299      	uxth	r1, r3
 8001002:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001006:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b29b      	uxth	r3, r3
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	200a      	movs	r0, #10
 8001016:	9000      	str	r0, [sp, #0]
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <OLED_I2C_WriteMulti+0xc8>)
 800101a:	f001 fda7 	bl	8002b6c <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001024:	46bd      	mov	sp, r7
 8001026:	bd90      	pop	{r4, r7, pc}
 8001028:	20000128 	.word	0x20000128

0800102c <OLED_I2C_Write>:


void OLED_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af02      	add	r7, sp, #8
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
 8001036:	460b      	mov	r3, r1
 8001038:	71bb      	strb	r3, [r7, #6]
 800103a:	4613      	mov	r3, r2
 800103c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001042:	797b      	ldrb	r3, [r7, #5]
 8001044:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	b299      	uxth	r1, r3
 800104a:	f107 020c 	add.w	r2, r7, #12
 800104e:	230a      	movs	r3, #10
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	4803      	ldr	r0, [pc, #12]	; (8001064 <OLED_I2C_Write+0x38>)
 8001056:	f001 fd89 	bl	8002b6c <HAL_I2C_Master_Transmit>
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000128 	.word	0x20000128

08001068 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <HAL_MspInit+0x4c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_MspInit+0x4c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	370c      	adds	r7, #12
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800

080010b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010bc:	e7fe      	b.n	80010bc <NMI_Handler+0x4>

080010be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <MemManage_Handler+0x4>

080010ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler+0x4>

080010d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <UsageFault_Handler+0x4>

080010d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f8d0 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <DMA2_Stream0_IRQHandler+0x10>)
 8001112:	f000 ffd1 	bl	80020b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000c8 	.word	0x200000c8

08001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <_sbrk+0x5c>)
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <_sbrk+0x60>)
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <_sbrk+0x64>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <_sbrk+0x64>)
 800113e:	4a12      	ldr	r2, [pc, #72]	; (8001188 <_sbrk+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	429a      	cmp	r2, r3
 800114e:	d207      	bcs.n	8001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001150:	f002 fe8e 	bl	8003e70 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	220c      	movs	r2, #12
 8001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295
 800115e:	e009      	b.n	8001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	4a05      	ldr	r2, [pc, #20]	; (8001184 <_sbrk+0x64>)
 8001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001172:	68fb      	ldr	r3, [r7, #12]
}
 8001174:	4618      	mov	r0, r3
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20030000 	.word	0x20030000
 8001180:	00000400 	.word	0x00000400
 8001184:	20000584 	.word	0x20000584
 8001188:	200006d8 	.word	0x200006d8

0800118c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b4:	f7ff ffea 	bl	800118c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011de:	f002 fe4d 	bl	8003e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff fba3 	bl	800092c <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011f4:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 80011f8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011fc:	200006d4 	.word	0x200006d4

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>
	...

08001204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <HAL_Init+0x40>)
 800120e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_Init+0x40>)
 800121a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800121e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_Init+0x40>)
 8001226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f000 fdfb 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f808 	bl	8001248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001238:	f7ff ff16 	bl	8001068 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40023c00 	.word	0x40023c00

08001248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_InitTick+0x54>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <HAL_InitTick+0x58>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001262:	fbb2 f3f3 	udiv	r3, r2, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fe13 	bl	8001e92 <HAL_SYSTICK_Config>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e00e      	b.n	8001294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b0f      	cmp	r3, #15
 800127a:	d80a      	bhi.n	8001292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127c:	2200      	movs	r2, #0
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f000 fddb 	bl	8001e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4a06      	ldr	r2, [pc, #24]	; (80012a4 <HAL_InitTick+0x5c>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000010 	.word	0x20000010
 80012a4:	2000000c 	.word	0x2000000c

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_IncTick+0x20>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_IncTick+0x24>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4413      	add	r3, r2
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <HAL_IncTick+0x24>)
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000010 	.word	0x20000010
 80012cc:	20000588 	.word	0x20000588

080012d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return uwTick;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <HAL_GetTick+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000588 	.word	0x20000588

080012e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012f0:	f7ff ffee 	bl	80012d0 <HAL_GetTick>
 80012f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001300:	d005      	beq.n	800130e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <HAL_Delay+0x44>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4413      	add	r3, r2
 800130c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800130e:	bf00      	nop
 8001310:	f7ff ffde 	bl	80012d0 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	d8f7      	bhi.n	8001310 <HAL_Delay+0x28>
  {
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000010 	.word	0x20000010

08001330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e033      	b.n	80013ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	2b00      	cmp	r3, #0
 800134c:	d109      	bne.n	8001362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff f97c 	bl	800064c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	2b00      	cmp	r3, #0
 800136c:	d118      	bne.n	80013a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001376:	f023 0302 	bic.w	r3, r3, #2
 800137a:	f043 0202 	orr.w	r2, r3, #2
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 fb02 	bl	800198c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f023 0303 	bic.w	r3, r3, #3
 8001396:	f043 0201 	orr.w	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
 800139e:	e001      	b.n	80013a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d2:	d113      	bne.n	80013fc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80013de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e2:	d10b      	bne.n	80013fc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f043 0220 	orr.w	r2, r3, #32
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e063      	b.n	80014c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80013fc:	f7ff ff68 	bl	80012d0 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001402:	e021      	b.n	8001448 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d01d      	beq.n	8001448 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_ADC_PollForConversion+0x6c>
 8001412:	f7ff ff5d 	bl	80012d0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	d212      	bcs.n	8001448 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b02      	cmp	r3, #2
 800142e:	d00b      	beq.n	8001448 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	e03d      	b.n	80014c4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b02      	cmp	r3, #2
 8001454:	d1d6      	bne.n	8001404 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f06f 0212 	mvn.w	r2, #18
 800145e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d123      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11f      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800149a:	2b00      	cmp	r3, #0
 800149c:	d111      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f043 0201 	orr.w	r2, r3, #1
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_ADC_Start_DMA+0x1e>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e0e9      	b.n	80016be <HAL_ADC_Start_DMA+0x1f2>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d018      	beq.n	8001532 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001510:	4b6d      	ldr	r3, [pc, #436]	; (80016c8 <HAL_ADC_Start_DMA+0x1fc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a6d      	ldr	r2, [pc, #436]	; (80016cc <HAL_ADC_Start_DMA+0x200>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001524:	e002      	b.n	800152c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	3b01      	subs	r3, #1
 800152a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f9      	bne.n	8001526 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001540:	d107      	bne.n	8001552 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b01      	cmp	r3, #1
 800155e:	f040 80a1 	bne.w	80016a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800158c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015a0:	d106      	bne.n	80015b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f023 0206 	bic.w	r2, r3, #6
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
 80015ae:	e002      	b.n	80015b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2200      	movs	r2, #0
 80015b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015be:	4b44      	ldr	r3, [pc, #272]	; (80016d0 <HAL_ADC_Start_DMA+0x204>)
 80015c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c6:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <HAL_ADC_Start_DMA+0x208>)
 80015c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	4a42      	ldr	r2, [pc, #264]	; (80016d8 <HAL_ADC_Start_DMA+0x20c>)
 80015d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	4a41      	ldr	r2, [pc, #260]	; (80016dc <HAL_ADC_Start_DMA+0x210>)
 80015d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001602:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	334c      	adds	r3, #76	; 0x4c
 800160e:	4619      	mov	r1, r3
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f000 fcf8 	bl	8002008 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12a      	bne.n	800167a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2d      	ldr	r2, [pc, #180]	; (80016e0 <HAL_ADC_Start_DMA+0x214>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d015      	beq.n	800165a <HAL_ADC_Start_DMA+0x18e>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <HAL_ADC_Start_DMA+0x218>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d105      	bne.n	8001644 <HAL_ADC_Start_DMA+0x178>
 8001638:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <HAL_ADC_Start_DMA+0x204>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 031f 	and.w	r3, r3, #31
 8001640:	2b00      	cmp	r3, #0
 8001642:	d00a      	beq.n	800165a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_ADC_Start_DMA+0x21c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d136      	bne.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_ADC_Start_DMA+0x204>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 0310 	and.w	r3, r3, #16
 8001656:	2b00      	cmp	r3, #0
 8001658:	d130      	bne.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d129      	bne.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e020      	b.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_ADC_Start_DMA+0x214>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d11b      	bne.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d114      	bne.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	e00b      	b.n	80016bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f043 0210 	orr.w	r2, r3, #16
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f043 0201 	orr.w	r2, r3, #1
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000008 	.word	0x20000008
 80016cc:	431bde83 	.word	0x431bde83
 80016d0:	40012300 	.word	0x40012300
 80016d4:	08001b85 	.word	0x08001b85
 80016d8:	08001c3f 	.word	0x08001c3f
 80016dc:	08001c5b 	.word	0x08001c5b
 80016e0:	40012000 	.word	0x40012000
 80016e4:	40012100 	.word	0x40012100
 80016e8:	40012200 	.word	0x40012200

080016ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800173c:	2b01      	cmp	r3, #1
 800173e:	d101      	bne.n	8001744 <HAL_ADC_ConfigChannel+0x1c>
 8001740:	2302      	movs	r3, #2
 8001742:	e113      	b.n	800196c <HAL_ADC_ConfigChannel+0x244>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2201      	movs	r2, #1
 8001748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d925      	bls.n	80017a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	68d9      	ldr	r1, [r3, #12]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	3b1e      	subs	r3, #30
 800176a:	2207      	movs	r2, #7
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68d9      	ldr	r1, [r3, #12]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	b29b      	uxth	r3, r3
 800178a:	4618      	mov	r0, r3
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4403      	add	r3, r0
 8001792:	3b1e      	subs	r3, #30
 8001794:	409a      	lsls	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	e022      	b.n	80017e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6919      	ldr	r1, [r3, #16]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4613      	mov	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4413      	add	r3, r2
 80017b4:	2207      	movs	r2, #7
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4618      	mov	r0, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4403      	add	r3, r0
 80017dc:	409a      	lsls	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d824      	bhi.n	8001838 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b05      	subs	r3, #5
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b05      	subs	r3, #5
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	635a      	str	r2, [r3, #52]	; 0x34
 8001836:	e04c      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d824      	bhi.n	800188a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b23      	subs	r3, #35	; 0x23
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43da      	mvns	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	400a      	ands	r2, r1
 8001860:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	4618      	mov	r0, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	3b23      	subs	r3, #35	; 0x23
 800187c:	fa00 f203 	lsl.w	r2, r0, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
 8001888:	e023      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	3b41      	subs	r3, #65	; 0x41
 800189c:	221f      	movs	r2, #31
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	3b41      	subs	r3, #65	; 0x41
 80018c6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_ADC_ConfigChannel+0x250>)
 80018d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a28      	ldr	r2, [pc, #160]	; (800197c <HAL_ADC_ConfigChannel+0x254>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d10f      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1d8>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b12      	cmp	r3, #18
 80018e6:	d10b      	bne.n	8001900 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_ADC_ConfigChannel+0x254>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d12b      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x23a>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_ADC_ConfigChannel+0x258>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d003      	beq.n	800191c <HAL_ADC_ConfigChannel+0x1f4>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b11      	cmp	r3, #17
 800191a:	d122      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_ADC_ConfigChannel+0x258>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d111      	bne.n	8001962 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_ADC_ConfigChannel+0x25c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_ADC_ConfigChannel+0x260>)
 8001944:	fba2 2303 	umull	r2, r3, r2, r3
 8001948:	0c9a      	lsrs	r2, r3, #18
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001954:	e002      	b.n	800195c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	3b01      	subs	r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f9      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	40012300 	.word	0x40012300
 800197c:	40012000 	.word	0x40012000
 8001980:	10000012 	.word	0x10000012
 8001984:	20000008 	.word	0x20000008
 8001988:	431bde83 	.word	0x431bde83

0800198c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001994:	4b79      	ldr	r3, [pc, #484]	; (8001b7c <ADC_Init+0x1f0>)
 8001996:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	431a      	orrs	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	021a      	lsls	r2, r3, #8
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	4a58      	ldr	r2, [pc, #352]	; (8001b80 <ADC_Init+0x1f4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d022      	beq.n	8001a6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6899      	ldr	r1, [r3, #8]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6899      	ldr	r1, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e00f      	b.n	8001a8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f022 0202 	bic.w	r2, r2, #2
 8001a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7e1b      	ldrb	r3, [r3, #24]
 8001aa4:	005a      	lsls	r2, r3, #1
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01b      	beq.n	8001af0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ac6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	035a      	lsls	r2, r3, #13
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	e007      	b.n	8001b00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	051a      	lsls	r2, r3, #20
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b42:	025a      	lsls	r2, r3, #9
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	029a      	lsls	r2, r3, #10
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	609a      	str	r2, [r3, #8]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40012300 	.word	0x40012300
 8001b80:	0f000001 	.word	0x0f000001

08001b84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d13c      	bne.n	8001c18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d12b      	bne.n	8001c10 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d127      	bne.n	8001c10 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d119      	bne.n	8001c10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0220 	bic.w	r2, r2, #32
 8001bea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fd6b 	bl	80016ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001c16:	e00e      	b.n	8001c36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff fd75 	bl	8001714 <HAL_ADC_ErrorCallback>
}
 8001c2a:	e004      	b.n	8001c36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fd57 	bl	8001700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c66:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2240      	movs	r2, #64	; 0x40
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f043 0204 	orr.w	r2, r3, #4
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f7ff fd4a 	bl	8001714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c80:	bf00      	nop
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cba:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <__NVIC_SetPriorityGrouping+0x44>)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	60d3      	str	r3, [r2, #12]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	; (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	; (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	; (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001df4:	d301      	bcc.n	8001dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00f      	b.n	8001e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <SysTick_Config+0x40>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e02:	210f      	movs	r1, #15
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f7ff ff8e 	bl	8001d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <SysTick_Config+0x40>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <SysTick_Config+0x40>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ff29 	bl	8001c88 <__NVIC_SetPriorityGrouping>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	4603      	mov	r3, r0
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e50:	f7ff ff3e 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8001e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	6978      	ldr	r0, [r7, #20]
 8001e5c:	f7ff ff8e 	bl	8001d7c <NVIC_EncodePriority>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff5d 	bl	8001d28 <__NVIC_SetPriority>
}
 8001e6e:	bf00      	nop
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff31 	bl	8001cec <__NVIC_EnableIRQ>
}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffa2 	bl	8001de4 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff fa0a 	bl	80012d0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e099      	b.n	8001ffc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0201 	bic.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee8:	e00f      	b.n	8001f0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eea:	f7ff f9f1 	bl	80012d0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d908      	bls.n	8001f0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2203      	movs	r2, #3
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e078      	b.n	8001ffc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e8      	bne.n	8001eea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_DMA_Init+0x158>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d107      	bne.n	8001f74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	697a      	ldr	r2, [r7, #20]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f023 0307 	bic.w	r3, r3, #7
 8001f8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d117      	bne.n	8001fce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa6f 	bl	8002494 <DMA_CheckFifoParam>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2240      	movs	r2, #64	; 0x40
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e016      	b.n	8001ffc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fa26 	bl	8002428 <DMA_CalcBaseAndBitshift>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	223f      	movs	r2, #63	; 0x3f
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	f010803f 	.word	0xf010803f

08002008 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	2300      	movs	r3, #0
 8002018:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_DMA_Start_IT+0x26>
 800202a:	2302      	movs	r3, #2
 800202c:	e040      	b.n	80020b0 <HAL_DMA_Start_IT+0xa8>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b01      	cmp	r3, #1
 8002040:	d12f      	bne.n	80020a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2202      	movs	r2, #2
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68b9      	ldr	r1, [r7, #8]
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f9b8 	bl	80023cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002060:	223f      	movs	r2, #63	; 0x3f
 8002062:	409a      	lsls	r2, r3
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0216 	orr.w	r2, r2, #22
 8002076:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0208 	orr.w	r2, r2, #8
 800208e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e005      	b.n	80020ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020aa:	2302      	movs	r3, #2
 80020ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020c4:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <HAL_DMA_IRQHandler+0x248>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a8e      	ldr	r2, [pc, #568]	; (8002304 <HAL_DMA_IRQHandler+0x24c>)
 80020ca:	fba2 2303 	umull	r2, r3, r2, r3
 80020ce:	0a9b      	lsrs	r3, r3, #10
 80020d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e2:	2208      	movs	r2, #8
 80020e4:	409a      	lsls	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01a      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d013      	beq.n	8002124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f022 0204 	bic.w	r2, r2, #4
 800210a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	2208      	movs	r2, #8
 8002112:	409a      	lsls	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211c:	f043 0201 	orr.w	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002128:	2201      	movs	r2, #1
 800212a:	409a      	lsls	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4013      	ands	r3, r2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d012      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00b      	beq.n	800215a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002146:	2201      	movs	r2, #1
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	f043 0202 	orr.w	r2, r3, #2
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215e:	2204      	movs	r2, #4
 8002160:	409a      	lsls	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d012      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00b      	beq.n	8002190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2204      	movs	r2, #4
 800217e:	409a      	lsls	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0204 	orr.w	r2, r3, #4
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	2210      	movs	r2, #16
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4013      	ands	r3, r2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d043      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d03c      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2210      	movs	r2, #16
 80021b4:	409a      	lsls	r2, r3
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d018      	beq.n	80021fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d108      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d024      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
 80021e6:	e01f      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d01b      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
 80021f8:	e016      	b.n	8002228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0208 	bic.w	r2, r2, #8
 8002216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222c:	2220      	movs	r2, #32
 800222e:	409a      	lsls	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 808f 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8087 	beq.w	8002358 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2220      	movs	r2, #32
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b05      	cmp	r3, #5
 8002260:	d136      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0216 	bic.w	r2, r2, #22
 8002270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d103      	bne.n	8002292 <HAL_DMA_IRQHandler+0x1da>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0208 	bic.w	r2, r2, #8
 80022a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	223f      	movs	r2, #63	; 0x3f
 80022a8:	409a      	lsls	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d07e      	beq.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
        }
        return;
 80022ce:	e079      	b.n	80023c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d01d      	beq.n	800231a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10d      	bne.n	8002308 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d031      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	4798      	blx	r3
 80022fc:	e02c      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
 80022fe:	bf00      	nop
 8002300:	20000008 	.word	0x20000008
 8002304:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
 8002318:	e01e      	b.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10f      	bne.n	8002348 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0210 	bic.w	r2, r2, #16
 8002336:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d032      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d022      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2205      	movs	r2, #5
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 0201 	bic.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3301      	adds	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	429a      	cmp	r2, r3
 800238e:	d307      	bcc.n	80023a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f2      	bne.n	8002384 <HAL_DMA_IRQHandler+0x2cc>
 800239e:	e000      	b.n	80023a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e000      	b.n	80023c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80023c4:	bf00      	nop
    }
  }
}
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b40      	cmp	r3, #64	; 0x40
 80023f8:	d108      	bne.n	800240c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800240a:	e007      	b.n	800241c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	3b10      	subs	r3, #16
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <DMA_CalcBaseAndBitshift+0x64>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002442:	4a13      	ldr	r2, [pc, #76]	; (8002490 <DMA_CalcBaseAndBitshift+0x68>)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b03      	cmp	r3, #3
 8002454:	d909      	bls.n	800246a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800245e:	f023 0303 	bic.w	r3, r3, #3
 8002462:	1d1a      	adds	r2, r3, #4
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	659a      	str	r2, [r3, #88]	; 0x58
 8002468:	e007      	b.n	800247a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002472:	f023 0303 	bic.w	r3, r3, #3
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	aaaaaaab 	.word	0xaaaaaaab
 8002490:	08005518 	.word	0x08005518

08002494 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11f      	bne.n	80024ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d856      	bhi.n	8002562 <DMA_CheckFifoParam+0xce>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <DMA_CheckFifoParam+0x28>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	080024df 	.word	0x080024df
 80024c4:	080024cd 	.word	0x080024cd
 80024c8:	08002563 	.word	0x08002563
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d046      	beq.n	8002566 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024dc:	e043      	b.n	8002566 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024e6:	d140      	bne.n	800256a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ec:	e03d      	b.n	800256a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	d121      	bne.n	800253c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d837      	bhi.n	800256e <DMA_CheckFifoParam+0xda>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <DMA_CheckFifoParam+0x70>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	0800251b 	.word	0x0800251b
 800250c:	08002515 	.word	0x08002515
 8002510:	0800252d 	.word	0x0800252d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	73fb      	strb	r3, [r7, #15]
      break;
 8002518:	e030      	b.n	800257c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d025      	beq.n	8002572 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252a:	e022      	b.n	8002572 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002534:	d11f      	bne.n	8002576 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800253a:	e01c      	b.n	8002576 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d903      	bls.n	800254a <DMA_CheckFifoParam+0xb6>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b03      	cmp	r3, #3
 8002546:	d003      	beq.n	8002550 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002548:	e018      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
      break;
 800254e:	e015      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00e      	beq.n	800257a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      break;
 8002560:	e00b      	b.n	800257a <DMA_CheckFifoParam+0xe6>
      break;
 8002562:	bf00      	nop
 8002564:	e00a      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;
 8002566:	bf00      	nop
 8002568:	e008      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;
 800256a:	bf00      	nop
 800256c:	e006      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;
 800256e:	bf00      	nop
 8002570:	e004      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;
 8002572:	bf00      	nop
 8002574:	e002      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;   
 8002576:	bf00      	nop
 8002578:	e000      	b.n	800257c <DMA_CheckFifoParam+0xe8>
      break;
 800257a:	bf00      	nop
    }
  } 
  
  return status; 
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop

0800258c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e177      	b.n	8002898 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f040 8166 	bne.w	8002892 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d005      	beq.n	80025de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d130      	bne.n	8002640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002614:	2201      	movs	r2, #1
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	091b      	lsrs	r3, r3, #4
 800262a:	f003 0201 	and.w	r2, r3, #1
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	2b03      	cmp	r3, #3
 800264a:	d017      	beq.n	800267c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d123      	bne.n	80026d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	220f      	movs	r2, #15
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	08da      	lsrs	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3208      	adds	r2, #8
 80026ca:	69b9      	ldr	r1, [r7, #24]
 80026cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2203      	movs	r2, #3
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4013      	ands	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0203 	and.w	r2, r3, #3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80c0 	beq.w	8002892 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b66      	ldr	r3, [pc, #408]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a65      	ldr	r2, [pc, #404]	; (80028b0 <HAL_GPIO_Init+0x324>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_GPIO_Init+0x324>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800272e:	4a61      	ldr	r2, [pc, #388]	; (80028b4 <HAL_GPIO_Init+0x328>)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	089b      	lsrs	r3, r3, #2
 8002734:	3302      	adds	r3, #2
 8002736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	4013      	ands	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_GPIO_Init+0x32c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d037      	beq.n	80027ca <HAL_GPIO_Init+0x23e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_GPIO_Init+0x330>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d031      	beq.n	80027c6 <HAL_GPIO_Init+0x23a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x334>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d02b      	beq.n	80027c2 <HAL_GPIO_Init+0x236>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a55      	ldr	r2, [pc, #340]	; (80028c4 <HAL_GPIO_Init+0x338>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d025      	beq.n	80027be <HAL_GPIO_Init+0x232>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a54      	ldr	r2, [pc, #336]	; (80028c8 <HAL_GPIO_Init+0x33c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d01f      	beq.n	80027ba <HAL_GPIO_Init+0x22e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a53      	ldr	r2, [pc, #332]	; (80028cc <HAL_GPIO_Init+0x340>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d019      	beq.n	80027b6 <HAL_GPIO_Init+0x22a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a52      	ldr	r2, [pc, #328]	; (80028d0 <HAL_GPIO_Init+0x344>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x226>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x348>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x222>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_GPIO_Init+0x34c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x21e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_GPIO_Init+0x350>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x21a>
 80027a2:	2309      	movs	r3, #9
 80027a4:	e012      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027a6:	230a      	movs	r3, #10
 80027a8:	e010      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027aa:	2308      	movs	r3, #8
 80027ac:	e00e      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ae:	2307      	movs	r3, #7
 80027b0:	e00c      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b2:	2306      	movs	r3, #6
 80027b4:	e00a      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027b6:	2305      	movs	r3, #5
 80027b8:	e008      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ba:	2304      	movs	r3, #4
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027be:	2303      	movs	r3, #3
 80027c0:	e004      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e002      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_GPIO_Init+0x240>
 80027ca:	2300      	movs	r3, #0
 80027cc:	69fa      	ldr	r2, [r7, #28]
 80027ce:	f002 0203 	and.w	r2, r2, #3
 80027d2:	0092      	lsls	r2, r2, #2
 80027d4:	4093      	lsls	r3, r2
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027dc:	4935      	ldr	r1, [pc, #212]	; (80028b4 <HAL_GPIO_Init+0x328>)
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	089b      	lsrs	r3, r3, #2
 80027e2:	3302      	adds	r3, #2
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ea:	4b3d      	ldr	r3, [pc, #244]	; (80028e0 <HAL_GPIO_Init+0x354>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800280e:	4a34      	ldr	r2, [pc, #208]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002814:	4b32      	ldr	r3, [pc, #200]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002838:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002862:	4a1f      	ldr	r2, [pc, #124]	; (80028e0 <HAL_GPIO_Init+0x354>)
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800288c:	4a14      	ldr	r2, [pc, #80]	; (80028e0 <HAL_GPIO_Init+0x354>)
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	f67f ae84 	bls.w	80025a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3724      	adds	r7, #36	; 0x24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40013800 	.word	0x40013800
 80028b8:	40020000 	.word	0x40020000
 80028bc:	40020400 	.word	0x40020400
 80028c0:	40020800 	.word	0x40020800
 80028c4:	40020c00 	.word	0x40020c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40021400 	.word	0x40021400
 80028d0:	40021800 	.word	0x40021800
 80028d4:	40021c00 	.word	0x40021c00
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022400 	.word	0x40022400
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e12b      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fd ffc6 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	; 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002948:	f001 fa42 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a81      	ldr	r2, [pc, #516]	; (8002b58 <HAL_I2C_Init+0x274>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d807      	bhi.n	8002968 <HAL_I2C_Init+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a80      	ldr	r2, [pc, #512]	; (8002b5c <HAL_I2C_Init+0x278>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e006      	b.n	8002976 <HAL_I2C_Init+0x92>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a7d      	ldr	r2, [pc, #500]	; (8002b60 <HAL_I2C_Init+0x27c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0e7      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a78      	ldr	r2, [pc, #480]	; (8002b64 <HAL_I2C_Init+0x280>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9b      	lsrs	r3, r3, #18
 8002988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a6a      	ldr	r2, [pc, #424]	; (8002b58 <HAL_I2C_Init+0x274>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d802      	bhi.n	80029b8 <HAL_I2C_Init+0xd4>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	e009      	b.n	80029cc <HAL_I2C_Init+0xe8>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	4a69      	ldr	r2, [pc, #420]	; (8002b68 <HAL_I2C_Init+0x284>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	3301      	adds	r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	495c      	ldr	r1, [pc, #368]	; (8002b58 <HAL_I2C_Init+0x274>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d819      	bhi.n	8002a20 <HAL_I2C_Init+0x13c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e59      	subs	r1, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a00:	400b      	ands	r3, r1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_I2C_Init+0x138>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e59      	subs	r1, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1a:	e051      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e04f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_I2C_Init+0x168>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e012      	b.n	8002a72 <HAL_I2C_Init+0x18e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	0099      	lsls	r1, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x196>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e022      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10e      	bne.n	8002aa0 <HAL_I2C_Init+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e58      	subs	r0, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	440b      	add	r3, r1
 8002a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a9e:	e00f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	0099      	lsls	r1, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	6809      	ldr	r1, [r1, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6911      	ldr	r1, [r2, #16]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68d2      	ldr	r2, [r2, #12]
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	000186a0 	.word	0x000186a0
 8002b5c:	001e847f 	.word	0x001e847f
 8002b60:	003d08ff 	.word	0x003d08ff
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	10624dd3 	.word	0x10624dd3

08002b6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	460b      	mov	r3, r1
 8002b7a:	817b      	strh	r3, [r7, #10]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7fe fba6 	bl	80012d0 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	f040 80e0 	bne.w	8002d54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2319      	movs	r3, #25
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	4970      	ldr	r1, [pc, #448]	; (8002d60 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 fa92 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002baa:	2302      	movs	r3, #2
 8002bac:	e0d3      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2C_Master_Transmit+0x50>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e0cc      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d007      	beq.n	8002be2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f042 0201 	orr.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2221      	movs	r2, #33	; 0x21
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	893a      	ldrh	r2, [r7, #8]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a50      	ldr	r2, [pc, #320]	; (8002d64 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c24:	8979      	ldrh	r1, [r7, #10]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	6a3a      	ldr	r2, [r7, #32]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f9ca 	bl	8002fc4 <I2C_MasterRequestWrite>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e08d      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	613b      	str	r3, [r7, #16]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c50:	e066      	b.n	8002d20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	6a39      	ldr	r1, [r7, #32]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 fb50 	bl	80032fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00d      	beq.n	8002c7e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d107      	bne.n	8002c7a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e06b      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d11b      	bne.n	8002cf4 <HAL_I2C_Master_Transmit+0x188>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d017      	beq.n	8002cf4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	1c5a      	adds	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	6a39      	ldr	r1, [r7, #32]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fb47 	bl	800338c <I2C_WaitOnBTFFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d107      	bne.n	8002d1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e01a      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d194      	bne.n	8002c52 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	e000      	b.n	8002d56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d54:	2302      	movs	r3, #2
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	00100002 	.word	0x00100002
 8002d64:	ffff0000 	.word	0xffff0000

08002d68 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	; 0x28
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	460b      	mov	r3, r1
 8002d76:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d78:	f7fe faaa 	bl	80012d0 <HAL_GetTick>
 8002d7c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	f040 8111 	bne.w	8002fb2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2319      	movs	r3, #25
 8002d96:	2201      	movs	r2, #1
 8002d98:	4988      	ldr	r1, [pc, #544]	; (8002fbc <HAL_I2C_IsDeviceReady+0x254>)
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f994 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
 8002da8:	e104      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2C_IsDeviceReady+0x50>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0fd      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d007      	beq.n	8002dde <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2224      	movs	r2, #36	; 0x24
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4a70      	ldr	r2, [pc, #448]	; (8002fc0 <HAL_I2C_IsDeviceReady+0x258>)
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e10:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f952 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00d      	beq.n	8002e46 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e38:	d103      	bne.n	8002e42 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e0b6      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e46:	897b      	ldrh	r3, [r7, #10]
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e54:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e56:	f7fe fa3b 	bl	80012d0 <HAL_GetTick>
 8002e5a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	bf0c      	ite	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	2300      	movne	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e8a:	e025      	b.n	8002ed8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e8c:	f7fe fa20 	bl	80012d0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d302      	bcc.n	8002ea2 <HAL_I2C_IsDeviceReady+0x13a>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22a0      	movs	r2, #160	; 0xa0
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2ba0      	cmp	r3, #160	; 0xa0
 8002ee2:	d005      	beq.n	8002ef0 <HAL_I2C_IsDeviceReady+0x188>
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d102      	bne.n	8002ef0 <HAL_I2C_IsDeviceReady+0x188>
 8002eea:	7dbb      	ldrb	r3, [r7, #22]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0cd      	beq.n	8002e8c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d129      	bne.n	8002f5a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f14:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2319      	movs	r3, #25
 8002f32:	2201      	movs	r2, #1
 8002f34:	4921      	ldr	r1, [pc, #132]	; (8002fbc <HAL_I2C_IsDeviceReady+0x254>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8c6 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e036      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e02c      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f72:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2319      	movs	r3, #25
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	490f      	ldr	r1, [pc, #60]	; (8002fbc <HAL_I2C_IsDeviceReady+0x254>)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f8a2 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e012      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	3301      	adds	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f4ff af32 	bcc.w	8002e02 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3720      	adds	r7, #32
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	00100002 	.word	0x00100002
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b088      	sub	sp, #32
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b08      	cmp	r3, #8
 8002fde:	d006      	beq.n	8002fee <I2C_MasterRequestWrite+0x2a>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d003      	beq.n	8002fee <I2C_MasterRequestWrite+0x2a>
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fec:	d108      	bne.n	8003000 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e00b      	b.n	8003018 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003004:	2b12      	cmp	r3, #18
 8003006:	d107      	bne.n	8003018 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003016:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f84f 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00d      	beq.n	800304c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	d103      	bne.n	8003048 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e035      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003054:	d108      	bne.n	8003068 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003056:	897b      	ldrh	r3, [r7, #10]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003064:	611a      	str	r2, [r3, #16]
 8003066:	e01b      	b.n	80030a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	11db      	asrs	r3, r3, #7
 800306c:	b2db      	uxtb	r3, r3
 800306e:	f003 0306 	and.w	r3, r3, #6
 8003072:	b2db      	uxtb	r3, r3
 8003074:	f063 030f 	orn	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	490e      	ldr	r1, [pc, #56]	; (80030c0 <I2C_MasterRequestWrite+0xfc>)
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 f898 	bl	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e010      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2da      	uxtb	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4907      	ldr	r1, [pc, #28]	; (80030c4 <I2C_MasterRequestWrite+0x100>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 f888 	bl	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00010008 	.word	0x00010008
 80030c4:	00010002 	.word	0x00010002

080030c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d8:	e048      	b.n	800316c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d044      	beq.n	800316c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe f8f5 	bl	80012d0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d139      	bne.n	800316c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10d      	bne.n	800311e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	e00c      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0x70>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	d116      	bne.n	800316c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e023      	b.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d10d      	bne.n	8003192 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	43da      	mvns	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4013      	ands	r3, r2
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	e00c      	b.n	80031ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d093      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031ca:	e071      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031da:	d123      	bne.n	8003224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e067      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d041      	beq.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322c:	f7fe f850 	bl	80012d0 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d302      	bcc.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d136      	bne.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d10c      	bne.n	8003266 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	e00b      	b.n	800327e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	43da      	mvns	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	4013      	ands	r3, r2
 8003272:	b29b      	uxth	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e021      	b.n	80032f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10c      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	43da      	mvns	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf14      	ite	ne
 80032cc:	2301      	movne	r3, #1
 80032ce:	2300      	moveq	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	e00b      	b.n	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	4013      	ands	r3, r2
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bf14      	ite	ne
 80032e6:	2301      	movne	r3, #1
 80032e8:	2300      	moveq	r3, #0
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f af6d 	bne.w	80031cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003308:	e034      	b.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f886 	bl	800341c <I2C_IsAcknowledgeFailed>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e034      	b.n	8003384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d028      	beq.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7fd ffd5 	bl	80012d0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d11d      	bne.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b80      	cmp	r3, #128	; 0x80
 8003344:	d016      	beq.n	8003374 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e007      	b.n	8003384 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d1c3      	bne.n	800330a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	60f8      	str	r0, [r7, #12]
 8003394:	60b9      	str	r1, [r7, #8]
 8003396:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003398:	e034      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f83e 	bl	800341c <I2C_IsAcknowledgeFailed>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e034      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d028      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7fd ff8d 	bl	80012d0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11d      	bne.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d016      	beq.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e007      	b.n	8003414 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	2b04      	cmp	r3, #4
 8003410:	d1c3      	bne.n	800339a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003432:	d11b      	bne.n	800346c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	f043 0204 	orr.w	r2, r3, #4
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
 8003482:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b20      	cmp	r3, #32
 800348e:	d129      	bne.n	80034e4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0201 	bic.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0210 	bic.w	r2, r2, #16
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b085      	sub	sp, #20
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d12a      	bne.n	8003562 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	; 0x24
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800352c:	89fb      	ldrh	r3, [r7, #14]
 800352e:	f023 030f 	bic.w	r3, r3, #15
 8003532:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	b29a      	uxth	r2, r3
 8003538:	89fb      	ldrh	r3, [r7, #14]
 800353a:	4313      	orrs	r3, r2
 800353c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	89fa      	ldrh	r2, [r7, #14]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0201 	orr.w	r2, r2, #1
 8003554:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e267      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d075      	beq.n	800367a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800358e:	4b88      	ldr	r3, [pc, #544]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d00c      	beq.n	80035b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359a:	4b85      	ldr	r3, [pc, #532]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d112      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035a6:	4b82      	ldr	r3, [pc, #520]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035b2:	d10b      	bne.n	80035cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	4b7e      	ldr	r3, [pc, #504]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d05b      	beq.n	8003678 <HAL_RCC_OscConfig+0x108>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d157      	bne.n	8003678 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e242      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d106      	bne.n	80035e4 <HAL_RCC_OscConfig+0x74>
 80035d6:	4b76      	ldr	r3, [pc, #472]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a75      	ldr	r2, [pc, #468]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e01d      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x98>
 80035ee:	4b70      	ldr	r3, [pc, #448]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6f      	ldr	r2, [pc, #444]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a6c      	ldr	r2, [pc, #432]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0xb0>
 8003608:	4b69      	ldr	r3, [pc, #420]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a68      	ldr	r2, [pc, #416]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b66      	ldr	r3, [pc, #408]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fe52 	bl	80012d0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd fe4e 	bl	80012d0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e207      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b5b      	ldr	r3, [pc, #364]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0xc0>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003650:	f7fd fe3e 	bl	80012d0 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003658:	f7fd fe3a 	bl	80012d0 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e1f3      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366a:	4b51      	ldr	r3, [pc, #324]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0xe8>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d063      	beq.n	800374e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003686:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00b      	beq.n	80036aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003692:	4b47      	ldr	r3, [pc, #284]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800369a:	2b08      	cmp	r3, #8
 800369c:	d11c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369e:	4b44      	ldr	r3, [pc, #272]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	4b41      	ldr	r3, [pc, #260]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d001      	beq.n	80036c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e1c7      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c2:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4937      	ldr	r1, [pc, #220]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d6:	e03a      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCC_OscConfig+0x244>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e6:	f7fd fdf3 	bl	80012d0 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ee:	f7fd fdef 	bl	80012d0 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1a8      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003700:	4b2b      	ldr	r3, [pc, #172]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370c:	4b28      	ldr	r3, [pc, #160]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4925      	ldr	r1, [pc, #148]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x244>)
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fd fdd2 	bl	80012d0 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003730:	f7fd fdce 	bl	80012d0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e187      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003742:	4b1b      	ldr	r3, [pc, #108]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f0      	bne.n	8003730 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0308 	and.w	r3, r3, #8
 8003756:	2b00      	cmp	r3, #0
 8003758:	d036      	beq.n	80037c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d016      	beq.n	8003790 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003762:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003768:	f7fd fdb2 	bl	80012d0 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003770:	f7fd fdae 	bl	80012d0 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e167      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003782:	4b0b      	ldr	r3, [pc, #44]	; (80037b0 <HAL_RCC_OscConfig+0x240>)
 8003784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x200>
 800378e:	e01b      	b.n	80037c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <HAL_RCC_OscConfig+0x248>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fd fd9b 	bl	80012d0 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	e00e      	b.n	80037bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7fd fd97 	bl	80012d0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d907      	bls.n	80037bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e150      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470000 	.word	0x42470000
 80037b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037bc:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1ea      	bne.n	800379e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 8097 	beq.w	8003904 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d6:	2300      	movs	r3, #0
 80037d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037da:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10f      	bne.n	8003806 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	4b7d      	ldr	r3, [pc, #500]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	4a7c      	ldr	r2, [pc, #496]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f4:	6413      	str	r3, [r2, #64]	; 0x40
 80037f6:	4b7a      	ldr	r3, [pc, #488]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003802:	2301      	movs	r3, #1
 8003804:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003806:	4b77      	ldr	r3, [pc, #476]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	2b00      	cmp	r3, #0
 8003810:	d118      	bne.n	8003844 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003812:	4b74      	ldr	r3, [pc, #464]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a73      	ldr	r2, [pc, #460]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 8003818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381e:	f7fd fd57 	bl	80012d0 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003824:	e008      	b.n	8003838 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003826:	f7fd fd53 	bl	80012d0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e10c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003838:	4b6a      	ldr	r3, [pc, #424]	; (80039e4 <HAL_RCC_OscConfig+0x474>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0f0      	beq.n	8003826 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d106      	bne.n	800385a <HAL_RCC_OscConfig+0x2ea>
 800384c:	4b64      	ldr	r3, [pc, #400]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	4a63      	ldr	r2, [pc, #396]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	6713      	str	r3, [r2, #112]	; 0x70
 8003858:	e01c      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b05      	cmp	r3, #5
 8003860:	d10c      	bne.n	800387c <HAL_RCC_OscConfig+0x30c>
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a5e      	ldr	r2, [pc, #376]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 0304 	orr.w	r3, r3, #4
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	4a5b      	ldr	r2, [pc, #364]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003874:	f043 0301 	orr.w	r3, r3, #1
 8003878:	6713      	str	r3, [r2, #112]	; 0x70
 800387a:	e00b      	b.n	8003894 <HAL_RCC_OscConfig+0x324>
 800387c:	4b58      	ldr	r3, [pc, #352]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a57      	ldr	r2, [pc, #348]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388c:	4a54      	ldr	r2, [pc, #336]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800388e:	f023 0304 	bic.w	r3, r3, #4
 8003892:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d015      	beq.n	80038c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389c:	f7fd fd18 	bl	80012d0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd fd14 	bl	80012d0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0cb      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ba:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0ee      	beq.n	80038a4 <HAL_RCC_OscConfig+0x334>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c8:	f7fd fd02 	bl	80012d0 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ce:	e00a      	b.n	80038e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d0:	f7fd fcfe 	bl	80012d0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f241 3288 	movw	r2, #5000	; 0x1388
 80038de:	4293      	cmp	r3, r2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e0b5      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1ee      	bne.n	80038d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f8:	4b39      	ldr	r3, [pc, #228]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a38      	ldr	r2, [pc, #224]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	2b00      	cmp	r3, #0
 800390a:	f000 80a1 	beq.w	8003a50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b08      	cmp	r3, #8
 8003918:	d05c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d141      	bne.n	80039a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7fd fcd2 	bl	80012d0 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7fd fcce 	bl	80012d0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e087      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b27      	ldr	r3, [pc, #156]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69da      	ldr	r2, [r3, #28]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	041b      	lsls	r3, r3, #16
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003978:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 800397a:	2201      	movs	r2, #1
 800397c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397e:	f7fd fca7 	bl	80012d0 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003984:	e008      	b.n	8003998 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003986:	f7fd fca3 	bl	80012d0 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d901      	bls.n	8003998 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e05c      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d0f0      	beq.n	8003986 <HAL_RCC_OscConfig+0x416>
 80039a4:	e054      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a6:	4b10      	ldr	r3, [pc, #64]	; (80039e8 <HAL_RCC_OscConfig+0x478>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fd fc90 	bl	80012d0 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd fc8c 	bl	80012d0 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e045      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <HAL_RCC_OscConfig+0x470>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x444>
 80039d2:	e03d      	b.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e038      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000
 80039e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039ec:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <HAL_RCC_OscConfig+0x4ec>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d028      	beq.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d121      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d11a      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d111      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a32:	085b      	lsrs	r3, r3, #1
 8003a34:	3b01      	subs	r3, #1
 8003a36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0cc      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b68      	ldr	r3, [pc, #416]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d90c      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b65      	ldr	r3, [pc, #404]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b63      	ldr	r3, [pc, #396]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0b8      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d020      	beq.n	8003aea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d005      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ab4:	4b59      	ldr	r3, [pc, #356]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a58      	ldr	r2, [pc, #352]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003abe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0308 	and.w	r3, r3, #8
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003acc:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a52      	ldr	r2, [pc, #328]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ad6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad8:	4b50      	ldr	r3, [pc, #320]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	494d      	ldr	r1, [pc, #308]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d044      	beq.n	8003b80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d119      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e07f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d003      	beq.n	8003b1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d107      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1e:	4b3f      	ldr	r3, [pc, #252]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e06f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e067      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3e:	4b37      	ldr	r3, [pc, #220]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f023 0203 	bic.w	r2, r3, #3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4934      	ldr	r1, [pc, #208]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b50:	f7fd fbbe 	bl	80012d0 <HAL_GetTick>
 8003b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b58:	f7fd fbba 	bl	80012d0 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04f      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 020c 	and.w	r2, r3, #12
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d1eb      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b80:	4b25      	ldr	r3, [pc, #148]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d20c      	bcs.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b20      	ldr	r3, [pc, #128]	; (8003c18 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e032      	b.n	8003c0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4916      	ldr	r1, [pc, #88]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	490e      	ldr	r1, [pc, #56]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003be6:	f000 f821 	bl	8003c2c <HAL_RCC_GetSysClockFreq>
 8003bea:	4602      	mov	r2, r0
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	490a      	ldr	r1, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	5ccb      	ldrb	r3, [r1, r3]
 8003bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <HAL_RCC_ClockConfig+0x1c4>)
 8003c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd fb1e 	bl	8001248 <HAL_InitTick>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40023c00 	.word	0x40023c00
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	08005500 	.word	0x08005500
 8003c24:	20000008 	.word	0x20000008
 8003c28:	2000000c 	.word	0x2000000c

08003c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b090      	sub	sp, #64	; 0x40
 8003c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c34:	2300      	movs	r3, #0
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
 8003c38:	2300      	movs	r3, #0
 8003c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c44:	4b59      	ldr	r3, [pc, #356]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d00d      	beq.n	8003c6c <HAL_RCC_GetSysClockFreq+0x40>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	f200 80a1 	bhi.w	8003d98 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <HAL_RCC_GetSysClockFreq+0x34>
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	d003      	beq.n	8003c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c5e:	e09b      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c62:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c64:	e09b      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c66:	4b53      	ldr	r3, [pc, #332]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c6a:	e098      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c74:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c76:	4b4d      	ldr	r3, [pc, #308]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d028      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	2200      	movs	r2, #0
 8003c8a:	623b      	str	r3, [r7, #32]
 8003c8c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c94:	2100      	movs	r1, #0
 8003c96:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c98:	fb03 f201 	mul.w	r2, r3, r1
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a43      	ldr	r2, [pc, #268]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ca6:	fba0 1202 	umull	r1, r2, r0, r2
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	460a      	mov	r2, r1
 8003cae:	62ba      	str	r2, [r7, #40]	; 0x28
 8003cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb2:	4413      	add	r3, r2
 8003cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb8:	2200      	movs	r2, #0
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	61fa      	str	r2, [r7, #28]
 8003cbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cc6:	f7fc fae3 	bl	8000290 <__aeabi_uldivmod>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4613      	mov	r3, r2
 8003cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cd2:	e053      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd4:	4b35      	ldr	r3, [pc, #212]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	099b      	lsrs	r3, r3, #6
 8003cda:	2200      	movs	r2, #0
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	617a      	str	r2, [r7, #20]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ce6:	f04f 0b00 	mov.w	fp, #0
 8003cea:	4652      	mov	r2, sl
 8003cec:	465b      	mov	r3, fp
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0159      	lsls	r1, r3, #5
 8003cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfc:	0150      	lsls	r0, r2, #5
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	ebb2 080a 	subs.w	r8, r2, sl
 8003d06:	eb63 090b 	sbc.w	r9, r3, fp
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d16:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d1a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d1e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d22:	eb63 0509 	sbc.w	r5, r3, r9
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	00eb      	lsls	r3, r5, #3
 8003d30:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d34:	00e2      	lsls	r2, r4, #3
 8003d36:	4614      	mov	r4, r2
 8003d38:	461d      	mov	r5, r3
 8003d3a:	eb14 030a 	adds.w	r3, r4, sl
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	eb45 030b 	adc.w	r3, r5, fp
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d52:	4629      	mov	r1, r5
 8003d54:	028b      	lsls	r3, r1, #10
 8003d56:	4621      	mov	r1, r4
 8003d58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	028a      	lsls	r2, r1, #10
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d66:	2200      	movs	r2, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	60fa      	str	r2, [r7, #12]
 8003d6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d70:	f7fc fa8e 	bl	8000290 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4613      	mov	r3, r2
 8003d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0c1b      	lsrs	r3, r3, #16
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	3301      	adds	r3, #1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d9a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3740      	adds	r7, #64	; 0x40
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400
 8003db4:	017d7840 	.word	0x017d7840

08003db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dbc:	4b03      	ldr	r3, [pc, #12]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000008 	.word	0x20000008

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff0 	bl	8003db8 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0a9b      	lsrs	r3, r3, #10
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08005510 	.word	0x08005510

08003df8 <sniprintf>:
 8003df8:	b40c      	push	{r2, r3}
 8003dfa:	b530      	push	{r4, r5, lr}
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <sniprintf+0x64>)
 8003dfe:	1e0c      	subs	r4, r1, #0
 8003e00:	681d      	ldr	r5, [r3, #0]
 8003e02:	b09d      	sub	sp, #116	; 0x74
 8003e04:	da08      	bge.n	8003e18 <sniprintf+0x20>
 8003e06:	238b      	movs	r3, #139	; 0x8b
 8003e08:	602b      	str	r3, [r5, #0]
 8003e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e0e:	b01d      	add	sp, #116	; 0x74
 8003e10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e14:	b002      	add	sp, #8
 8003e16:	4770      	bx	lr
 8003e18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003e1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003e20:	bf14      	ite	ne
 8003e22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003e26:	4623      	moveq	r3, r4
 8003e28:	9304      	str	r3, [sp, #16]
 8003e2a:	9307      	str	r3, [sp, #28]
 8003e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e30:	9002      	str	r0, [sp, #8]
 8003e32:	9006      	str	r0, [sp, #24]
 8003e34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003e38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003e3a:	ab21      	add	r3, sp, #132	; 0x84
 8003e3c:	a902      	add	r1, sp, #8
 8003e3e:	4628      	mov	r0, r5
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	f000 f993 	bl	800416c <_svfiprintf_r>
 8003e46:	1c43      	adds	r3, r0, #1
 8003e48:	bfbc      	itt	lt
 8003e4a:	238b      	movlt	r3, #139	; 0x8b
 8003e4c:	602b      	strlt	r3, [r5, #0]
 8003e4e:	2c00      	cmp	r4, #0
 8003e50:	d0dd      	beq.n	8003e0e <sniprintf+0x16>
 8003e52:	9b02      	ldr	r3, [sp, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	e7d9      	b.n	8003e0e <sniprintf+0x16>
 8003e5a:	bf00      	nop
 8003e5c:	20000060 	.word	0x20000060

08003e60 <memset>:
 8003e60:	4402      	add	r2, r0
 8003e62:	4603      	mov	r3, r0
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d100      	bne.n	8003e6a <memset+0xa>
 8003e68:	4770      	bx	lr
 8003e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e6e:	e7f9      	b.n	8003e64 <memset+0x4>

08003e70 <__errno>:
 8003e70:	4b01      	ldr	r3, [pc, #4]	; (8003e78 <__errno+0x8>)
 8003e72:	6818      	ldr	r0, [r3, #0]
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000060 	.word	0x20000060

08003e7c <__libc_init_array>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4d0d      	ldr	r5, [pc, #52]	; (8003eb4 <__libc_init_array+0x38>)
 8003e80:	4c0d      	ldr	r4, [pc, #52]	; (8003eb8 <__libc_init_array+0x3c>)
 8003e82:	1b64      	subs	r4, r4, r5
 8003e84:	10a4      	asrs	r4, r4, #2
 8003e86:	2600      	movs	r6, #0
 8003e88:	42a6      	cmp	r6, r4
 8003e8a:	d109      	bne.n	8003ea0 <__libc_init_array+0x24>
 8003e8c:	4d0b      	ldr	r5, [pc, #44]	; (8003ebc <__libc_init_array+0x40>)
 8003e8e:	4c0c      	ldr	r4, [pc, #48]	; (8003ec0 <__libc_init_array+0x44>)
 8003e90:	f000 fc6a 	bl	8004768 <_init>
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	2600      	movs	r6, #0
 8003e9a:	42a6      	cmp	r6, r4
 8003e9c:	d105      	bne.n	8003eaa <__libc_init_array+0x2e>
 8003e9e:	bd70      	pop	{r4, r5, r6, pc}
 8003ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea4:	4798      	blx	r3
 8003ea6:	3601      	adds	r6, #1
 8003ea8:	e7ee      	b.n	8003e88 <__libc_init_array+0xc>
 8003eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eae:	4798      	blx	r3
 8003eb0:	3601      	adds	r6, #1
 8003eb2:	e7f2      	b.n	8003e9a <__libc_init_array+0x1e>
 8003eb4:	0800555c 	.word	0x0800555c
 8003eb8:	0800555c 	.word	0x0800555c
 8003ebc:	0800555c 	.word	0x0800555c
 8003ec0:	08005560 	.word	0x08005560

08003ec4 <__retarget_lock_acquire_recursive>:
 8003ec4:	4770      	bx	lr

08003ec6 <__retarget_lock_release_recursive>:
 8003ec6:	4770      	bx	lr

08003ec8 <_free_r>:
 8003ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003eca:	2900      	cmp	r1, #0
 8003ecc:	d044      	beq.n	8003f58 <_free_r+0x90>
 8003ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed2:	9001      	str	r0, [sp, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8003eda:	bfb8      	it	lt
 8003edc:	18e4      	addlt	r4, r4, r3
 8003ede:	f000 f8df 	bl	80040a0 <__malloc_lock>
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <_free_r+0x94>)
 8003ee4:	9801      	ldr	r0, [sp, #4]
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	b933      	cbnz	r3, 8003ef8 <_free_r+0x30>
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	6014      	str	r4, [r2, #0]
 8003eee:	b003      	add	sp, #12
 8003ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef4:	f000 b8da 	b.w	80040ac <__malloc_unlock>
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	d908      	bls.n	8003f0e <_free_r+0x46>
 8003efc:	6825      	ldr	r5, [r4, #0]
 8003efe:	1961      	adds	r1, r4, r5
 8003f00:	428b      	cmp	r3, r1
 8003f02:	bf01      	itttt	eq
 8003f04:	6819      	ldreq	r1, [r3, #0]
 8003f06:	685b      	ldreq	r3, [r3, #4]
 8003f08:	1949      	addeq	r1, r1, r5
 8003f0a:	6021      	streq	r1, [r4, #0]
 8003f0c:	e7ed      	b.n	8003eea <_free_r+0x22>
 8003f0e:	461a      	mov	r2, r3
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b10b      	cbz	r3, 8003f18 <_free_r+0x50>
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d9fa      	bls.n	8003f0e <_free_r+0x46>
 8003f18:	6811      	ldr	r1, [r2, #0]
 8003f1a:	1855      	adds	r5, r2, r1
 8003f1c:	42a5      	cmp	r5, r4
 8003f1e:	d10b      	bne.n	8003f38 <_free_r+0x70>
 8003f20:	6824      	ldr	r4, [r4, #0]
 8003f22:	4421      	add	r1, r4
 8003f24:	1854      	adds	r4, r2, r1
 8003f26:	42a3      	cmp	r3, r4
 8003f28:	6011      	str	r1, [r2, #0]
 8003f2a:	d1e0      	bne.n	8003eee <_free_r+0x26>
 8003f2c:	681c      	ldr	r4, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	6053      	str	r3, [r2, #4]
 8003f32:	440c      	add	r4, r1
 8003f34:	6014      	str	r4, [r2, #0]
 8003f36:	e7da      	b.n	8003eee <_free_r+0x26>
 8003f38:	d902      	bls.n	8003f40 <_free_r+0x78>
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	6003      	str	r3, [r0, #0]
 8003f3e:	e7d6      	b.n	8003eee <_free_r+0x26>
 8003f40:	6825      	ldr	r5, [r4, #0]
 8003f42:	1961      	adds	r1, r4, r5
 8003f44:	428b      	cmp	r3, r1
 8003f46:	bf04      	itt	eq
 8003f48:	6819      	ldreq	r1, [r3, #0]
 8003f4a:	685b      	ldreq	r3, [r3, #4]
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	bf04      	itt	eq
 8003f50:	1949      	addeq	r1, r1, r5
 8003f52:	6021      	streq	r1, [r4, #0]
 8003f54:	6054      	str	r4, [r2, #4]
 8003f56:	e7ca      	b.n	8003eee <_free_r+0x26>
 8003f58:	b003      	add	sp, #12
 8003f5a:	bd30      	pop	{r4, r5, pc}
 8003f5c:	200006cc 	.word	0x200006cc

08003f60 <sbrk_aligned>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4e0e      	ldr	r6, [pc, #56]	; (8003f9c <sbrk_aligned+0x3c>)
 8003f64:	460c      	mov	r4, r1
 8003f66:	6831      	ldr	r1, [r6, #0]
 8003f68:	4605      	mov	r5, r0
 8003f6a:	b911      	cbnz	r1, 8003f72 <sbrk_aligned+0x12>
 8003f6c:	f000 fba6 	bl	80046bc <_sbrk_r>
 8003f70:	6030      	str	r0, [r6, #0]
 8003f72:	4621      	mov	r1, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	f000 fba1 	bl	80046bc <_sbrk_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	d00a      	beq.n	8003f94 <sbrk_aligned+0x34>
 8003f7e:	1cc4      	adds	r4, r0, #3
 8003f80:	f024 0403 	bic.w	r4, r4, #3
 8003f84:	42a0      	cmp	r0, r4
 8003f86:	d007      	beq.n	8003f98 <sbrk_aligned+0x38>
 8003f88:	1a21      	subs	r1, r4, r0
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f000 fb96 	bl	80046bc <_sbrk_r>
 8003f90:	3001      	adds	r0, #1
 8003f92:	d101      	bne.n	8003f98 <sbrk_aligned+0x38>
 8003f94:	f04f 34ff 	mov.w	r4, #4294967295
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	200006d0 	.word	0x200006d0

08003fa0 <_malloc_r>:
 8003fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fa4:	1ccd      	adds	r5, r1, #3
 8003fa6:	f025 0503 	bic.w	r5, r5, #3
 8003faa:	3508      	adds	r5, #8
 8003fac:	2d0c      	cmp	r5, #12
 8003fae:	bf38      	it	cc
 8003fb0:	250c      	movcc	r5, #12
 8003fb2:	2d00      	cmp	r5, #0
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	db01      	blt.n	8003fbc <_malloc_r+0x1c>
 8003fb8:	42a9      	cmp	r1, r5
 8003fba:	d905      	bls.n	8003fc8 <_malloc_r+0x28>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	2600      	movs	r6, #0
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800409c <_malloc_r+0xfc>
 8003fcc:	f000 f868 	bl	80040a0 <__malloc_lock>
 8003fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8003fd4:	461c      	mov	r4, r3
 8003fd6:	bb5c      	cbnz	r4, 8004030 <_malloc_r+0x90>
 8003fd8:	4629      	mov	r1, r5
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7ff ffc0 	bl	8003f60 <sbrk_aligned>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	d155      	bne.n	8004092 <_malloc_r+0xf2>
 8003fe6:	f8d8 4000 	ldr.w	r4, [r8]
 8003fea:	4626      	mov	r6, r4
 8003fec:	2e00      	cmp	r6, #0
 8003fee:	d145      	bne.n	800407c <_malloc_r+0xdc>
 8003ff0:	2c00      	cmp	r4, #0
 8003ff2:	d048      	beq.n	8004086 <_malloc_r+0xe6>
 8003ff4:	6823      	ldr	r3, [r4, #0]
 8003ff6:	4631      	mov	r1, r6
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	eb04 0903 	add.w	r9, r4, r3
 8003ffe:	f000 fb5d 	bl	80046bc <_sbrk_r>
 8004002:	4581      	cmp	r9, r0
 8004004:	d13f      	bne.n	8004086 <_malloc_r+0xe6>
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	1a6d      	subs	r5, r5, r1
 800400a:	4629      	mov	r1, r5
 800400c:	4638      	mov	r0, r7
 800400e:	f7ff ffa7 	bl	8003f60 <sbrk_aligned>
 8004012:	3001      	adds	r0, #1
 8004014:	d037      	beq.n	8004086 <_malloc_r+0xe6>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	442b      	add	r3, r5
 800401a:	6023      	str	r3, [r4, #0]
 800401c:	f8d8 3000 	ldr.w	r3, [r8]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d038      	beq.n	8004096 <_malloc_r+0xf6>
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	42a2      	cmp	r2, r4
 8004028:	d12b      	bne.n	8004082 <_malloc_r+0xe2>
 800402a:	2200      	movs	r2, #0
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	e00f      	b.n	8004050 <_malloc_r+0xb0>
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	1b52      	subs	r2, r2, r5
 8004034:	d41f      	bmi.n	8004076 <_malloc_r+0xd6>
 8004036:	2a0b      	cmp	r2, #11
 8004038:	d917      	bls.n	800406a <_malloc_r+0xca>
 800403a:	1961      	adds	r1, r4, r5
 800403c:	42a3      	cmp	r3, r4
 800403e:	6025      	str	r5, [r4, #0]
 8004040:	bf18      	it	ne
 8004042:	6059      	strne	r1, [r3, #4]
 8004044:	6863      	ldr	r3, [r4, #4]
 8004046:	bf08      	it	eq
 8004048:	f8c8 1000 	streq.w	r1, [r8]
 800404c:	5162      	str	r2, [r4, r5]
 800404e:	604b      	str	r3, [r1, #4]
 8004050:	4638      	mov	r0, r7
 8004052:	f104 060b 	add.w	r6, r4, #11
 8004056:	f000 f829 	bl	80040ac <__malloc_unlock>
 800405a:	f026 0607 	bic.w	r6, r6, #7
 800405e:	1d23      	adds	r3, r4, #4
 8004060:	1af2      	subs	r2, r6, r3
 8004062:	d0ae      	beq.n	8003fc2 <_malloc_r+0x22>
 8004064:	1b9b      	subs	r3, r3, r6
 8004066:	50a3      	str	r3, [r4, r2]
 8004068:	e7ab      	b.n	8003fc2 <_malloc_r+0x22>
 800406a:	42a3      	cmp	r3, r4
 800406c:	6862      	ldr	r2, [r4, #4]
 800406e:	d1dd      	bne.n	800402c <_malloc_r+0x8c>
 8004070:	f8c8 2000 	str.w	r2, [r8]
 8004074:	e7ec      	b.n	8004050 <_malloc_r+0xb0>
 8004076:	4623      	mov	r3, r4
 8004078:	6864      	ldr	r4, [r4, #4]
 800407a:	e7ac      	b.n	8003fd6 <_malloc_r+0x36>
 800407c:	4634      	mov	r4, r6
 800407e:	6876      	ldr	r6, [r6, #4]
 8004080:	e7b4      	b.n	8003fec <_malloc_r+0x4c>
 8004082:	4613      	mov	r3, r2
 8004084:	e7cc      	b.n	8004020 <_malloc_r+0x80>
 8004086:	230c      	movs	r3, #12
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	4638      	mov	r0, r7
 800408c:	f000 f80e 	bl	80040ac <__malloc_unlock>
 8004090:	e797      	b.n	8003fc2 <_malloc_r+0x22>
 8004092:	6025      	str	r5, [r4, #0]
 8004094:	e7dc      	b.n	8004050 <_malloc_r+0xb0>
 8004096:	605b      	str	r3, [r3, #4]
 8004098:	deff      	udf	#255	; 0xff
 800409a:	bf00      	nop
 800409c:	200006cc 	.word	0x200006cc

080040a0 <__malloc_lock>:
 80040a0:	4801      	ldr	r0, [pc, #4]	; (80040a8 <__malloc_lock+0x8>)
 80040a2:	f7ff bf0f 	b.w	8003ec4 <__retarget_lock_acquire_recursive>
 80040a6:	bf00      	nop
 80040a8:	200006c8 	.word	0x200006c8

080040ac <__malloc_unlock>:
 80040ac:	4801      	ldr	r0, [pc, #4]	; (80040b4 <__malloc_unlock+0x8>)
 80040ae:	f7ff bf0a 	b.w	8003ec6 <__retarget_lock_release_recursive>
 80040b2:	bf00      	nop
 80040b4:	200006c8 	.word	0x200006c8

080040b8 <__ssputs_r>:
 80040b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040bc:	688e      	ldr	r6, [r1, #8]
 80040be:	461f      	mov	r7, r3
 80040c0:	42be      	cmp	r6, r7
 80040c2:	680b      	ldr	r3, [r1, #0]
 80040c4:	4682      	mov	sl, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	4690      	mov	r8, r2
 80040ca:	d82c      	bhi.n	8004126 <__ssputs_r+0x6e>
 80040cc:	898a      	ldrh	r2, [r1, #12]
 80040ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040d2:	d026      	beq.n	8004122 <__ssputs_r+0x6a>
 80040d4:	6965      	ldr	r5, [r4, #20]
 80040d6:	6909      	ldr	r1, [r1, #16]
 80040d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040dc:	eba3 0901 	sub.w	r9, r3, r1
 80040e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040e4:	1c7b      	adds	r3, r7, #1
 80040e6:	444b      	add	r3, r9
 80040e8:	106d      	asrs	r5, r5, #1
 80040ea:	429d      	cmp	r5, r3
 80040ec:	bf38      	it	cc
 80040ee:	461d      	movcc	r5, r3
 80040f0:	0553      	lsls	r3, r2, #21
 80040f2:	d527      	bpl.n	8004144 <__ssputs_r+0x8c>
 80040f4:	4629      	mov	r1, r5
 80040f6:	f7ff ff53 	bl	8003fa0 <_malloc_r>
 80040fa:	4606      	mov	r6, r0
 80040fc:	b360      	cbz	r0, 8004158 <__ssputs_r+0xa0>
 80040fe:	6921      	ldr	r1, [r4, #16]
 8004100:	464a      	mov	r2, r9
 8004102:	f000 faeb 	bl	80046dc <memcpy>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800410c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	6126      	str	r6, [r4, #16]
 8004114:	6165      	str	r5, [r4, #20]
 8004116:	444e      	add	r6, r9
 8004118:	eba5 0509 	sub.w	r5, r5, r9
 800411c:	6026      	str	r6, [r4, #0]
 800411e:	60a5      	str	r5, [r4, #8]
 8004120:	463e      	mov	r6, r7
 8004122:	42be      	cmp	r6, r7
 8004124:	d900      	bls.n	8004128 <__ssputs_r+0x70>
 8004126:	463e      	mov	r6, r7
 8004128:	6820      	ldr	r0, [r4, #0]
 800412a:	4632      	mov	r2, r6
 800412c:	4641      	mov	r1, r8
 800412e:	f000 faab 	bl	8004688 <memmove>
 8004132:	68a3      	ldr	r3, [r4, #8]
 8004134:	1b9b      	subs	r3, r3, r6
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	6823      	ldr	r3, [r4, #0]
 800413a:	4433      	add	r3, r6
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	2000      	movs	r0, #0
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	462a      	mov	r2, r5
 8004146:	f000 fad7 	bl	80046f8 <_realloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	2800      	cmp	r0, #0
 800414e:	d1e0      	bne.n	8004112 <__ssputs_r+0x5a>
 8004150:	6921      	ldr	r1, [r4, #16]
 8004152:	4650      	mov	r0, sl
 8004154:	f7ff feb8 	bl	8003ec8 <_free_r>
 8004158:	230c      	movs	r3, #12
 800415a:	f8ca 3000 	str.w	r3, [sl]
 800415e:	89a3      	ldrh	r3, [r4, #12]
 8004160:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004164:	81a3      	strh	r3, [r4, #12]
 8004166:	f04f 30ff 	mov.w	r0, #4294967295
 800416a:	e7e9      	b.n	8004140 <__ssputs_r+0x88>

0800416c <_svfiprintf_r>:
 800416c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004170:	4698      	mov	r8, r3
 8004172:	898b      	ldrh	r3, [r1, #12]
 8004174:	061b      	lsls	r3, r3, #24
 8004176:	b09d      	sub	sp, #116	; 0x74
 8004178:	4607      	mov	r7, r0
 800417a:	460d      	mov	r5, r1
 800417c:	4614      	mov	r4, r2
 800417e:	d50e      	bpl.n	800419e <_svfiprintf_r+0x32>
 8004180:	690b      	ldr	r3, [r1, #16]
 8004182:	b963      	cbnz	r3, 800419e <_svfiprintf_r+0x32>
 8004184:	2140      	movs	r1, #64	; 0x40
 8004186:	f7ff ff0b 	bl	8003fa0 <_malloc_r>
 800418a:	6028      	str	r0, [r5, #0]
 800418c:	6128      	str	r0, [r5, #16]
 800418e:	b920      	cbnz	r0, 800419a <_svfiprintf_r+0x2e>
 8004190:	230c      	movs	r3, #12
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	f04f 30ff 	mov.w	r0, #4294967295
 8004198:	e0d0      	b.n	800433c <_svfiprintf_r+0x1d0>
 800419a:	2340      	movs	r3, #64	; 0x40
 800419c:	616b      	str	r3, [r5, #20]
 800419e:	2300      	movs	r3, #0
 80041a0:	9309      	str	r3, [sp, #36]	; 0x24
 80041a2:	2320      	movs	r3, #32
 80041a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80041ac:	2330      	movs	r3, #48	; 0x30
 80041ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004354 <_svfiprintf_r+0x1e8>
 80041b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041b6:	f04f 0901 	mov.w	r9, #1
 80041ba:	4623      	mov	r3, r4
 80041bc:	469a      	mov	sl, r3
 80041be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041c2:	b10a      	cbz	r2, 80041c8 <_svfiprintf_r+0x5c>
 80041c4:	2a25      	cmp	r2, #37	; 0x25
 80041c6:	d1f9      	bne.n	80041bc <_svfiprintf_r+0x50>
 80041c8:	ebba 0b04 	subs.w	fp, sl, r4
 80041cc:	d00b      	beq.n	80041e6 <_svfiprintf_r+0x7a>
 80041ce:	465b      	mov	r3, fp
 80041d0:	4622      	mov	r2, r4
 80041d2:	4629      	mov	r1, r5
 80041d4:	4638      	mov	r0, r7
 80041d6:	f7ff ff6f 	bl	80040b8 <__ssputs_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	f000 80a9 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e2:	445a      	add	r2, fp
 80041e4:	9209      	str	r2, [sp, #36]	; 0x24
 80041e6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80a1 	beq.w	8004332 <_svfiprintf_r+0x1c6>
 80041f0:	2300      	movs	r3, #0
 80041f2:	f04f 32ff 	mov.w	r2, #4294967295
 80041f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041fa:	f10a 0a01 	add.w	sl, sl, #1
 80041fe:	9304      	str	r3, [sp, #16]
 8004200:	9307      	str	r3, [sp, #28]
 8004202:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004206:	931a      	str	r3, [sp, #104]	; 0x68
 8004208:	4654      	mov	r4, sl
 800420a:	2205      	movs	r2, #5
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	4850      	ldr	r0, [pc, #320]	; (8004354 <_svfiprintf_r+0x1e8>)
 8004212:	f7fb ffed 	bl	80001f0 <memchr>
 8004216:	9a04      	ldr	r2, [sp, #16]
 8004218:	b9d8      	cbnz	r0, 8004252 <_svfiprintf_r+0xe6>
 800421a:	06d0      	lsls	r0, r2, #27
 800421c:	bf44      	itt	mi
 800421e:	2320      	movmi	r3, #32
 8004220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004224:	0711      	lsls	r1, r2, #28
 8004226:	bf44      	itt	mi
 8004228:	232b      	movmi	r3, #43	; 0x2b
 800422a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800422e:	f89a 3000 	ldrb.w	r3, [sl]
 8004232:	2b2a      	cmp	r3, #42	; 0x2a
 8004234:	d015      	beq.n	8004262 <_svfiprintf_r+0xf6>
 8004236:	9a07      	ldr	r2, [sp, #28]
 8004238:	4654      	mov	r4, sl
 800423a:	2000      	movs	r0, #0
 800423c:	f04f 0c0a 	mov.w	ip, #10
 8004240:	4621      	mov	r1, r4
 8004242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004246:	3b30      	subs	r3, #48	; 0x30
 8004248:	2b09      	cmp	r3, #9
 800424a:	d94d      	bls.n	80042e8 <_svfiprintf_r+0x17c>
 800424c:	b1b0      	cbz	r0, 800427c <_svfiprintf_r+0x110>
 800424e:	9207      	str	r2, [sp, #28]
 8004250:	e014      	b.n	800427c <_svfiprintf_r+0x110>
 8004252:	eba0 0308 	sub.w	r3, r0, r8
 8004256:	fa09 f303 	lsl.w	r3, r9, r3
 800425a:	4313      	orrs	r3, r2
 800425c:	9304      	str	r3, [sp, #16]
 800425e:	46a2      	mov	sl, r4
 8004260:	e7d2      	b.n	8004208 <_svfiprintf_r+0x9c>
 8004262:	9b03      	ldr	r3, [sp, #12]
 8004264:	1d19      	adds	r1, r3, #4
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	9103      	str	r1, [sp, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	bfbb      	ittet	lt
 800426e:	425b      	neglt	r3, r3
 8004270:	f042 0202 	orrlt.w	r2, r2, #2
 8004274:	9307      	strge	r3, [sp, #28]
 8004276:	9307      	strlt	r3, [sp, #28]
 8004278:	bfb8      	it	lt
 800427a:	9204      	strlt	r2, [sp, #16]
 800427c:	7823      	ldrb	r3, [r4, #0]
 800427e:	2b2e      	cmp	r3, #46	; 0x2e
 8004280:	d10c      	bne.n	800429c <_svfiprintf_r+0x130>
 8004282:	7863      	ldrb	r3, [r4, #1]
 8004284:	2b2a      	cmp	r3, #42	; 0x2a
 8004286:	d134      	bne.n	80042f2 <_svfiprintf_r+0x186>
 8004288:	9b03      	ldr	r3, [sp, #12]
 800428a:	1d1a      	adds	r2, r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	9203      	str	r2, [sp, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	bfb8      	it	lt
 8004294:	f04f 33ff 	movlt.w	r3, #4294967295
 8004298:	3402      	adds	r4, #2
 800429a:	9305      	str	r3, [sp, #20]
 800429c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004364 <_svfiprintf_r+0x1f8>
 80042a0:	7821      	ldrb	r1, [r4, #0]
 80042a2:	2203      	movs	r2, #3
 80042a4:	4650      	mov	r0, sl
 80042a6:	f7fb ffa3 	bl	80001f0 <memchr>
 80042aa:	b138      	cbz	r0, 80042bc <_svfiprintf_r+0x150>
 80042ac:	9b04      	ldr	r3, [sp, #16]
 80042ae:	eba0 000a 	sub.w	r0, r0, sl
 80042b2:	2240      	movs	r2, #64	; 0x40
 80042b4:	4082      	lsls	r2, r0
 80042b6:	4313      	orrs	r3, r2
 80042b8:	3401      	adds	r4, #1
 80042ba:	9304      	str	r3, [sp, #16]
 80042bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042c0:	4825      	ldr	r0, [pc, #148]	; (8004358 <_svfiprintf_r+0x1ec>)
 80042c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c6:	2206      	movs	r2, #6
 80042c8:	f7fb ff92 	bl	80001f0 <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d038      	beq.n	8004342 <_svfiprintf_r+0x1d6>
 80042d0:	4b22      	ldr	r3, [pc, #136]	; (800435c <_svfiprintf_r+0x1f0>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_svfiprintf_r+0x1b0>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	4433      	add	r3, r6
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e768      	b.n	80041ba <_svfiprintf_r+0x4e>
 80042e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ec:	460c      	mov	r4, r1
 80042ee:	2001      	movs	r0, #1
 80042f0:	e7a6      	b.n	8004240 <_svfiprintf_r+0xd4>
 80042f2:	2300      	movs	r3, #0
 80042f4:	3401      	adds	r4, #1
 80042f6:	9305      	str	r3, [sp, #20]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0c0a 	mov.w	ip, #10
 80042fe:	4620      	mov	r0, r4
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x1a6>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c6      	beq.n	800429c <_svfiprintf_r+0x130>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c4      	b.n	800429c <_svfiprintf_r+0x130>
 8004312:	fb0c 2101 	mla	r1, ip, r1, r2
 8004316:	4604      	mov	r4, r0
 8004318:	2301      	movs	r3, #1
 800431a:	e7f0      	b.n	80042fe <_svfiprintf_r+0x192>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	462a      	mov	r2, r5
 8004322:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <_svfiprintf_r+0x1f4>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4638      	mov	r0, r7
 8004328:	f3af 8000 	nop.w
 800432c:	1c42      	adds	r2, r0, #1
 800432e:	4606      	mov	r6, r0
 8004330:	d1d6      	bne.n	80042e0 <_svfiprintf_r+0x174>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af2d 	bmi.w	8004194 <_svfiprintf_r+0x28>
 800433a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433c:	b01d      	add	sp, #116	; 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	ab03      	add	r3, sp, #12
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	462a      	mov	r2, r5
 8004348:	4b05      	ldr	r3, [pc, #20]	; (8004360 <_svfiprintf_r+0x1f4>)
 800434a:	a904      	add	r1, sp, #16
 800434c:	4638      	mov	r0, r7
 800434e:	f000 f879 	bl	8004444 <_printf_i>
 8004352:	e7eb      	b.n	800432c <_svfiprintf_r+0x1c0>
 8004354:	08005520 	.word	0x08005520
 8004358:	0800552a 	.word	0x0800552a
 800435c:	00000000 	.word	0x00000000
 8004360:	080040b9 	.word	0x080040b9
 8004364:	08005526 	.word	0x08005526

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4616      	mov	r6, r2
 800436e:	4699      	mov	r9, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004378:	4293      	cmp	r3, r2
 800437a:	bfb8      	it	lt
 800437c:	4613      	movlt	r3, r2
 800437e:	6033      	str	r3, [r6, #0]
 8004380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004384:	4607      	mov	r7, r0
 8004386:	460c      	mov	r4, r1
 8004388:	b10a      	cbz	r2, 800438e <_printf_common+0x26>
 800438a:	3301      	adds	r3, #1
 800438c:	6033      	str	r3, [r6, #0]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	0699      	lsls	r1, r3, #26
 8004392:	bf42      	ittt	mi
 8004394:	6833      	ldrmi	r3, [r6, #0]
 8004396:	3302      	addmi	r3, #2
 8004398:	6033      	strmi	r3, [r6, #0]
 800439a:	6825      	ldr	r5, [r4, #0]
 800439c:	f015 0506 	ands.w	r5, r5, #6
 80043a0:	d106      	bne.n	80043b0 <_printf_common+0x48>
 80043a2:	f104 0a19 	add.w	sl, r4, #25
 80043a6:	68e3      	ldr	r3, [r4, #12]
 80043a8:	6832      	ldr	r2, [r6, #0]
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	42ab      	cmp	r3, r5
 80043ae:	dc26      	bgt.n	80043fe <_printf_common+0x96>
 80043b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	6822      	ldr	r2, [r4, #0]
 80043b8:	bf18      	it	ne
 80043ba:	2301      	movne	r3, #1
 80043bc:	0692      	lsls	r2, r2, #26
 80043be:	d42b      	bmi.n	8004418 <_printf_common+0xb0>
 80043c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043c4:	4649      	mov	r1, r9
 80043c6:	4638      	mov	r0, r7
 80043c8:	47c0      	blx	r8
 80043ca:	3001      	adds	r0, #1
 80043cc:	d01e      	beq.n	800440c <_printf_common+0xa4>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	6922      	ldr	r2, [r4, #16]
 80043d2:	f003 0306 	and.w	r3, r3, #6
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf02      	ittt	eq
 80043da:	68e5      	ldreq	r5, [r4, #12]
 80043dc:	6833      	ldreq	r3, [r6, #0]
 80043de:	1aed      	subeq	r5, r5, r3
 80043e0:	68a3      	ldr	r3, [r4, #8]
 80043e2:	bf0c      	ite	eq
 80043e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043e8:	2500      	movne	r5, #0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	bfc4      	itt	gt
 80043ee:	1a9b      	subgt	r3, r3, r2
 80043f0:	18ed      	addgt	r5, r5, r3
 80043f2:	2600      	movs	r6, #0
 80043f4:	341a      	adds	r4, #26
 80043f6:	42b5      	cmp	r5, r6
 80043f8:	d11a      	bne.n	8004430 <_printf_common+0xc8>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e008      	b.n	8004410 <_printf_common+0xa8>
 80043fe:	2301      	movs	r3, #1
 8004400:	4652      	mov	r2, sl
 8004402:	4649      	mov	r1, r9
 8004404:	4638      	mov	r0, r7
 8004406:	47c0      	blx	r8
 8004408:	3001      	adds	r0, #1
 800440a:	d103      	bne.n	8004414 <_printf_common+0xac>
 800440c:	f04f 30ff 	mov.w	r0, #4294967295
 8004410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004414:	3501      	adds	r5, #1
 8004416:	e7c6      	b.n	80043a6 <_printf_common+0x3e>
 8004418:	18e1      	adds	r1, r4, r3
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	2030      	movs	r0, #48	; 0x30
 800441e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004422:	4422      	add	r2, r4
 8004424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800442c:	3302      	adds	r3, #2
 800442e:	e7c7      	b.n	80043c0 <_printf_common+0x58>
 8004430:	2301      	movs	r3, #1
 8004432:	4622      	mov	r2, r4
 8004434:	4649      	mov	r1, r9
 8004436:	4638      	mov	r0, r7
 8004438:	47c0      	blx	r8
 800443a:	3001      	adds	r0, #1
 800443c:	d0e6      	beq.n	800440c <_printf_common+0xa4>
 800443e:	3601      	adds	r6, #1
 8004440:	e7d9      	b.n	80043f6 <_printf_common+0x8e>
	...

08004444 <_printf_i>:
 8004444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	7e0f      	ldrb	r7, [r1, #24]
 800444a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800444c:	2f78      	cmp	r7, #120	; 0x78
 800444e:	4691      	mov	r9, r2
 8004450:	4680      	mov	r8, r0
 8004452:	460c      	mov	r4, r1
 8004454:	469a      	mov	sl, r3
 8004456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800445a:	d807      	bhi.n	800446c <_printf_i+0x28>
 800445c:	2f62      	cmp	r7, #98	; 0x62
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x32>
 8004460:	2f00      	cmp	r7, #0
 8004462:	f000 80d4 	beq.w	800460e <_printf_i+0x1ca>
 8004466:	2f58      	cmp	r7, #88	; 0x58
 8004468:	f000 80c0 	beq.w	80045ec <_printf_i+0x1a8>
 800446c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004474:	e03a      	b.n	80044ec <_printf_i+0xa8>
 8004476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800447a:	2b15      	cmp	r3, #21
 800447c:	d8f6      	bhi.n	800446c <_printf_i+0x28>
 800447e:	a101      	add	r1, pc, #4	; (adr r1, 8004484 <_printf_i+0x40>)
 8004480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004484:	080044dd 	.word	0x080044dd
 8004488:	080044f1 	.word	0x080044f1
 800448c:	0800446d 	.word	0x0800446d
 8004490:	0800446d 	.word	0x0800446d
 8004494:	0800446d 	.word	0x0800446d
 8004498:	0800446d 	.word	0x0800446d
 800449c:	080044f1 	.word	0x080044f1
 80044a0:	0800446d 	.word	0x0800446d
 80044a4:	0800446d 	.word	0x0800446d
 80044a8:	0800446d 	.word	0x0800446d
 80044ac:	0800446d 	.word	0x0800446d
 80044b0:	080045f5 	.word	0x080045f5
 80044b4:	0800451d 	.word	0x0800451d
 80044b8:	080045af 	.word	0x080045af
 80044bc:	0800446d 	.word	0x0800446d
 80044c0:	0800446d 	.word	0x0800446d
 80044c4:	08004617 	.word	0x08004617
 80044c8:	0800446d 	.word	0x0800446d
 80044cc:	0800451d 	.word	0x0800451d
 80044d0:	0800446d 	.word	0x0800446d
 80044d4:	0800446d 	.word	0x0800446d
 80044d8:	080045b7 	.word	0x080045b7
 80044dc:	682b      	ldr	r3, [r5, #0]
 80044de:	1d1a      	adds	r2, r3, #4
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	602a      	str	r2, [r5, #0]
 80044e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044ec:	2301      	movs	r3, #1
 80044ee:	e09f      	b.n	8004630 <_printf_i+0x1ec>
 80044f0:	6820      	ldr	r0, [r4, #0]
 80044f2:	682b      	ldr	r3, [r5, #0]
 80044f4:	0607      	lsls	r7, r0, #24
 80044f6:	f103 0104 	add.w	r1, r3, #4
 80044fa:	6029      	str	r1, [r5, #0]
 80044fc:	d501      	bpl.n	8004502 <_printf_i+0xbe>
 80044fe:	681e      	ldr	r6, [r3, #0]
 8004500:	e003      	b.n	800450a <_printf_i+0xc6>
 8004502:	0646      	lsls	r6, r0, #25
 8004504:	d5fb      	bpl.n	80044fe <_printf_i+0xba>
 8004506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800450a:	2e00      	cmp	r6, #0
 800450c:	da03      	bge.n	8004516 <_printf_i+0xd2>
 800450e:	232d      	movs	r3, #45	; 0x2d
 8004510:	4276      	negs	r6, r6
 8004512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004516:	485a      	ldr	r0, [pc, #360]	; (8004680 <_printf_i+0x23c>)
 8004518:	230a      	movs	r3, #10
 800451a:	e012      	b.n	8004542 <_printf_i+0xfe>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	6820      	ldr	r0, [r4, #0]
 8004520:	1d19      	adds	r1, r3, #4
 8004522:	6029      	str	r1, [r5, #0]
 8004524:	0605      	lsls	r5, r0, #24
 8004526:	d501      	bpl.n	800452c <_printf_i+0xe8>
 8004528:	681e      	ldr	r6, [r3, #0]
 800452a:	e002      	b.n	8004532 <_printf_i+0xee>
 800452c:	0641      	lsls	r1, r0, #25
 800452e:	d5fb      	bpl.n	8004528 <_printf_i+0xe4>
 8004530:	881e      	ldrh	r6, [r3, #0]
 8004532:	4853      	ldr	r0, [pc, #332]	; (8004680 <_printf_i+0x23c>)
 8004534:	2f6f      	cmp	r7, #111	; 0x6f
 8004536:	bf0c      	ite	eq
 8004538:	2308      	moveq	r3, #8
 800453a:	230a      	movne	r3, #10
 800453c:	2100      	movs	r1, #0
 800453e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004542:	6865      	ldr	r5, [r4, #4]
 8004544:	60a5      	str	r5, [r4, #8]
 8004546:	2d00      	cmp	r5, #0
 8004548:	bfa2      	ittt	ge
 800454a:	6821      	ldrge	r1, [r4, #0]
 800454c:	f021 0104 	bicge.w	r1, r1, #4
 8004550:	6021      	strge	r1, [r4, #0]
 8004552:	b90e      	cbnz	r6, 8004558 <_printf_i+0x114>
 8004554:	2d00      	cmp	r5, #0
 8004556:	d04b      	beq.n	80045f0 <_printf_i+0x1ac>
 8004558:	4615      	mov	r5, r2
 800455a:	fbb6 f1f3 	udiv	r1, r6, r3
 800455e:	fb03 6711 	mls	r7, r3, r1, r6
 8004562:	5dc7      	ldrb	r7, [r0, r7]
 8004564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004568:	4637      	mov	r7, r6
 800456a:	42bb      	cmp	r3, r7
 800456c:	460e      	mov	r6, r1
 800456e:	d9f4      	bls.n	800455a <_printf_i+0x116>
 8004570:	2b08      	cmp	r3, #8
 8004572:	d10b      	bne.n	800458c <_printf_i+0x148>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	07de      	lsls	r6, r3, #31
 8004578:	d508      	bpl.n	800458c <_printf_i+0x148>
 800457a:	6923      	ldr	r3, [r4, #16]
 800457c:	6861      	ldr	r1, [r4, #4]
 800457e:	4299      	cmp	r1, r3
 8004580:	bfde      	ittt	le
 8004582:	2330      	movle	r3, #48	; 0x30
 8004584:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800458c:	1b52      	subs	r2, r2, r5
 800458e:	6122      	str	r2, [r4, #16]
 8004590:	f8cd a000 	str.w	sl, [sp]
 8004594:	464b      	mov	r3, r9
 8004596:	aa03      	add	r2, sp, #12
 8004598:	4621      	mov	r1, r4
 800459a:	4640      	mov	r0, r8
 800459c:	f7ff fee4 	bl	8004368 <_printf_common>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d14a      	bne.n	800463a <_printf_i+0x1f6>
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295
 80045a8:	b004      	add	sp, #16
 80045aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	f043 0320 	orr.w	r3, r3, #32
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	4833      	ldr	r0, [pc, #204]	; (8004684 <_printf_i+0x240>)
 80045b8:	2778      	movs	r7, #120	; 0x78
 80045ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	6829      	ldr	r1, [r5, #0]
 80045c2:	061f      	lsls	r7, r3, #24
 80045c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80045c8:	d402      	bmi.n	80045d0 <_printf_i+0x18c>
 80045ca:	065f      	lsls	r7, r3, #25
 80045cc:	bf48      	it	mi
 80045ce:	b2b6      	uxthmi	r6, r6
 80045d0:	07df      	lsls	r7, r3, #31
 80045d2:	bf48      	it	mi
 80045d4:	f043 0320 	orrmi.w	r3, r3, #32
 80045d8:	6029      	str	r1, [r5, #0]
 80045da:	bf48      	it	mi
 80045dc:	6023      	strmi	r3, [r4, #0]
 80045de:	b91e      	cbnz	r6, 80045e8 <_printf_i+0x1a4>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	f023 0320 	bic.w	r3, r3, #32
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	2310      	movs	r3, #16
 80045ea:	e7a7      	b.n	800453c <_printf_i+0xf8>
 80045ec:	4824      	ldr	r0, [pc, #144]	; (8004680 <_printf_i+0x23c>)
 80045ee:	e7e4      	b.n	80045ba <_printf_i+0x176>
 80045f0:	4615      	mov	r5, r2
 80045f2:	e7bd      	b.n	8004570 <_printf_i+0x12c>
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	6826      	ldr	r6, [r4, #0]
 80045f8:	6961      	ldr	r1, [r4, #20]
 80045fa:	1d18      	adds	r0, r3, #4
 80045fc:	6028      	str	r0, [r5, #0]
 80045fe:	0635      	lsls	r5, r6, #24
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	d501      	bpl.n	8004608 <_printf_i+0x1c4>
 8004604:	6019      	str	r1, [r3, #0]
 8004606:	e002      	b.n	800460e <_printf_i+0x1ca>
 8004608:	0670      	lsls	r0, r6, #25
 800460a:	d5fb      	bpl.n	8004604 <_printf_i+0x1c0>
 800460c:	8019      	strh	r1, [r3, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	4615      	mov	r5, r2
 8004614:	e7bc      	b.n	8004590 <_printf_i+0x14c>
 8004616:	682b      	ldr	r3, [r5, #0]
 8004618:	1d1a      	adds	r2, r3, #4
 800461a:	602a      	str	r2, [r5, #0]
 800461c:	681d      	ldr	r5, [r3, #0]
 800461e:	6862      	ldr	r2, [r4, #4]
 8004620:	2100      	movs	r1, #0
 8004622:	4628      	mov	r0, r5
 8004624:	f7fb fde4 	bl	80001f0 <memchr>
 8004628:	b108      	cbz	r0, 800462e <_printf_i+0x1ea>
 800462a:	1b40      	subs	r0, r0, r5
 800462c:	6060      	str	r0, [r4, #4]
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	6123      	str	r3, [r4, #16]
 8004632:	2300      	movs	r3, #0
 8004634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004638:	e7aa      	b.n	8004590 <_printf_i+0x14c>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	462a      	mov	r2, r5
 800463e:	4649      	mov	r1, r9
 8004640:	4640      	mov	r0, r8
 8004642:	47d0      	blx	sl
 8004644:	3001      	adds	r0, #1
 8004646:	d0ad      	beq.n	80045a4 <_printf_i+0x160>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	079b      	lsls	r3, r3, #30
 800464c:	d413      	bmi.n	8004676 <_printf_i+0x232>
 800464e:	68e0      	ldr	r0, [r4, #12]
 8004650:	9b03      	ldr	r3, [sp, #12]
 8004652:	4298      	cmp	r0, r3
 8004654:	bfb8      	it	lt
 8004656:	4618      	movlt	r0, r3
 8004658:	e7a6      	b.n	80045a8 <_printf_i+0x164>
 800465a:	2301      	movs	r3, #1
 800465c:	4632      	mov	r2, r6
 800465e:	4649      	mov	r1, r9
 8004660:	4640      	mov	r0, r8
 8004662:	47d0      	blx	sl
 8004664:	3001      	adds	r0, #1
 8004666:	d09d      	beq.n	80045a4 <_printf_i+0x160>
 8004668:	3501      	adds	r5, #1
 800466a:	68e3      	ldr	r3, [r4, #12]
 800466c:	9903      	ldr	r1, [sp, #12]
 800466e:	1a5b      	subs	r3, r3, r1
 8004670:	42ab      	cmp	r3, r5
 8004672:	dcf2      	bgt.n	800465a <_printf_i+0x216>
 8004674:	e7eb      	b.n	800464e <_printf_i+0x20a>
 8004676:	2500      	movs	r5, #0
 8004678:	f104 0619 	add.w	r6, r4, #25
 800467c:	e7f5      	b.n	800466a <_printf_i+0x226>
 800467e:	bf00      	nop
 8004680:	08005531 	.word	0x08005531
 8004684:	08005542 	.word	0x08005542

08004688 <memmove>:
 8004688:	4288      	cmp	r0, r1
 800468a:	b510      	push	{r4, lr}
 800468c:	eb01 0402 	add.w	r4, r1, r2
 8004690:	d902      	bls.n	8004698 <memmove+0x10>
 8004692:	4284      	cmp	r4, r0
 8004694:	4623      	mov	r3, r4
 8004696:	d807      	bhi.n	80046a8 <memmove+0x20>
 8004698:	1e43      	subs	r3, r0, #1
 800469a:	42a1      	cmp	r1, r4
 800469c:	d008      	beq.n	80046b0 <memmove+0x28>
 800469e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80046a6:	e7f8      	b.n	800469a <memmove+0x12>
 80046a8:	4402      	add	r2, r0
 80046aa:	4601      	mov	r1, r0
 80046ac:	428a      	cmp	r2, r1
 80046ae:	d100      	bne.n	80046b2 <memmove+0x2a>
 80046b0:	bd10      	pop	{r4, pc}
 80046b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80046ba:	e7f7      	b.n	80046ac <memmove+0x24>

080046bc <_sbrk_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d06      	ldr	r5, [pc, #24]	; (80046d8 <_sbrk_r+0x1c>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	602b      	str	r3, [r5, #0]
 80046c8:	f7fc fd2a 	bl	8001120 <_sbrk>
 80046cc:	1c43      	adds	r3, r0, #1
 80046ce:	d102      	bne.n	80046d6 <_sbrk_r+0x1a>
 80046d0:	682b      	ldr	r3, [r5, #0]
 80046d2:	b103      	cbz	r3, 80046d6 <_sbrk_r+0x1a>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	bd38      	pop	{r3, r4, r5, pc}
 80046d8:	200006c4 	.word	0x200006c4

080046dc <memcpy>:
 80046dc:	440a      	add	r2, r1
 80046de:	4291      	cmp	r1, r2
 80046e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e4:	d100      	bne.n	80046e8 <memcpy+0xc>
 80046e6:	4770      	bx	lr
 80046e8:	b510      	push	{r4, lr}
 80046ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f2:	4291      	cmp	r1, r2
 80046f4:	d1f9      	bne.n	80046ea <memcpy+0xe>
 80046f6:	bd10      	pop	{r4, pc}

080046f8 <_realloc_r>:
 80046f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046fc:	4680      	mov	r8, r0
 80046fe:	4614      	mov	r4, r2
 8004700:	460e      	mov	r6, r1
 8004702:	b921      	cbnz	r1, 800470e <_realloc_r+0x16>
 8004704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	4611      	mov	r1, r2
 800470a:	f7ff bc49 	b.w	8003fa0 <_malloc_r>
 800470e:	b92a      	cbnz	r2, 800471c <_realloc_r+0x24>
 8004710:	f7ff fbda 	bl	8003ec8 <_free_r>
 8004714:	4625      	mov	r5, r4
 8004716:	4628      	mov	r0, r5
 8004718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800471c:	f000 f81b 	bl	8004756 <_malloc_usable_size_r>
 8004720:	4284      	cmp	r4, r0
 8004722:	4607      	mov	r7, r0
 8004724:	d802      	bhi.n	800472c <_realloc_r+0x34>
 8004726:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800472a:	d812      	bhi.n	8004752 <_realloc_r+0x5a>
 800472c:	4621      	mov	r1, r4
 800472e:	4640      	mov	r0, r8
 8004730:	f7ff fc36 	bl	8003fa0 <_malloc_r>
 8004734:	4605      	mov	r5, r0
 8004736:	2800      	cmp	r0, #0
 8004738:	d0ed      	beq.n	8004716 <_realloc_r+0x1e>
 800473a:	42bc      	cmp	r4, r7
 800473c:	4622      	mov	r2, r4
 800473e:	4631      	mov	r1, r6
 8004740:	bf28      	it	cs
 8004742:	463a      	movcs	r2, r7
 8004744:	f7ff ffca 	bl	80046dc <memcpy>
 8004748:	4631      	mov	r1, r6
 800474a:	4640      	mov	r0, r8
 800474c:	f7ff fbbc 	bl	8003ec8 <_free_r>
 8004750:	e7e1      	b.n	8004716 <_realloc_r+0x1e>
 8004752:	4635      	mov	r5, r6
 8004754:	e7df      	b.n	8004716 <_realloc_r+0x1e>

08004756 <_malloc_usable_size_r>:
 8004756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800475a:	1f18      	subs	r0, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	bfbc      	itt	lt
 8004760:	580b      	ldrlt	r3, [r1, r0]
 8004762:	18c0      	addlt	r0, r0, r3
 8004764:	4770      	bx	lr
	...

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
